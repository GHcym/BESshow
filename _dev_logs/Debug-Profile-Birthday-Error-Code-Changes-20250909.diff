diff --git a/REQ-001.txt b/REQ-001.txt
deleted file mode 100644
index fcea5dc..0000000
--- a/REQ-001.txt
+++ /dev/null
@@ -1,170 +0,0 @@
-----------
-# AI 角色設定
-你是一位嚴謹且專業的資深 Django 全端開發工程師，也是一位負責、耐心、善於指導程式新手的技術導師。
-你的核心任務是為一位剛入門的開發者，提供一份從零到一建立廟宇網站 MVP (Minimum Viable Product) 的超詳細、分階段執行計畫。
-你的所有解釋都必須清晰易懂，專業的術語會有詳細的解說，並在每一個關鍵步驟提供完整的程式碼範例和終端機操作指令。
-且遵循以下互動特點：
-- 資訊即時性： 查詢並使用最新資訊來分析與建議。
-- 回應的完整度： 評估我的技術程度（目前為 Web 開發新手），並提供容易理解的解答與背景原因。
-- 互動式提示： 適時使用蘇格拉底式的提問與反思引導，幫助我釐清更深層次的需求與技術決策。
-- 支架式引導回應： 回應會採用清晰的架構，歸納資訊並說明各主題間的關聯。
-- 個人化支援： 記住我們的對話脈絡與已達成的共識，提供連貫且個人化的支援。
-- 使用語言：溝通內容使用正體中文，專有名稱使用中英對照。
-
-# 開發者設定
-- 使用繁體中文溝通，沒有網站開發經驗的新手，希望快速建立網站的 MVP。
-----------
-
-----------
-# BES 網站規劃需求定義
-### @ 2025.09.02
-----------
-
----------- ---------- ---------- ---------- 
-# 專案背景與目標
-- 專案目的：以最簡易、快速的方式，開發一個現代化且功能完整的「廟宇網站」
-- 開發策略：採用 MVP（最小可行產品）優先的敏捷開發模式，追求「分階段可展示」的成果。
-- 專案名稱：BESshow （廟宇祈福網站）
-- 技術棧：Django、Python、PostgreSQL、Docker、WSL、VS code…等。
-- AI 輔助工具：GitHub Copilot（Gemini、ChatGPT、DeepSeek 或類似工具）
-- 主要目標： 開發一個名為 "besshow" 的廟宇網站，讓信眾可以線上點燈並完成付款，資料可以同步到由 API 串接的燈牆進行顯示與更新。
-
-- 專案基底：專案是基於 `https://github.com/wsvincent/lithium.git` 這個 Django 專案範本進行客製化開發。
-- 執行方針：
-	- 以 `wsvincent/lithium` 為基礎，為廟宇快速打造一個 MVP 網站。
-	- 以簡潔、穩定為核心想法，逐步完成網站功能，並設計可展示的階段功能。
-	- 設計切分階段，設計成可交由 AI 輔助執行的步驟，切分階段的重點原則：功能的相依性。請由基礎模組開始建置，以方便進行測試。
-	- 開發前，先檢查與修正開發環境，並完成開發環境說明文件。
-	- 開發環境需求如下：「# 技術與開發環境」與 「# 運維環境」所列建議
-	- 如果符合功能相依原則，先專注於核心功能「線上點燈」，讓信眾選擇燈種（背景或主動註冊）、並完成線上付款。
-
-# 技術與開發環境（下列版本使用最新或長期支援版本）：
-- 程式語言： Python
-- IDE： VS Code + WSL 擴充套件
-- Web framework: Django
-- DB: PostgreSQL 
-- OS: WSL 2 - Ubuntu 24.04 LTS (in Window 11 Pro)
-- 開發環境用 Docker 管理，並使用現代化的 docker compose V2 指令與語法。
-- 開發環境用 Docker，分二個 Docker
-	-- bes-web: Django
-	-- bes-db: PostgreSQL
-- Python 套件管理： 在 WSL 環境中使用 uv。	
-- 備註：環境變數管理：
-	- 專案已整合並使用 `django-environ` 套件。
-    - 所有敏感資訊與環境相關設定都存放在 `.env` 檔案中，該檔案已被加入 `.gitignore`。
-
-# 運維環境：（可以等 MVP 完成再處理）
-- 上線部署使用 AWS 服務（AWS EC2、AWS RDS...等）
-- AWS 上的 Docker 容器職責分離：
-- docker-compose.yml 中，規劃三個服務容器：
-	- nginx: 作為反向代理（Reverse Proxy），處理靜態檔案、負載平衡，並將請求轉發給 Gunicorn。
-	- web: 運行 Gunicorn 跟 Django 應用。
-	- db: PostgreSQL 服務。
-- 備註：Docker 架構：
-    - 採用多容器分離架構，初期為 `web` (Django) 和 `db` (PostgreSQL)，後期為部署準備會加入 `nginx`。
-    - `docker-compose.yml` 檔案遵循最新的 **Compose Specification**，**不包含**頂層的 `version` 屬性。
-
-
-
-# 網站需求的功能如下：
-
-## 需求
-
-### 需求 1：使用者線上點燈
-
-**使用者故事：** 
-作為使用者（善男：男性、信女：女性、善信：善男信女統稱或二元性別），
-我希望能夠於網站上完成線上點燈。流程如下:
-- 網站提示善信輸入資料並檢核完善
-- 網站系統自動註冊其帳號並登入
-- 查詢並顯示可選擇之燈種（光明等、財神燈...等）
-- 完成燈種與數量選擇（購物車）
-- 依顯示的金額掃描 QR Code 進行付款。
-- 網站系統顯示結緣清單（訂單），並提供感謝狀（購買收據），格式可為 PDF。
-
-**網站功能**
-
-功能名稱：	線上點燈
-使用者：		善信
-功能簡述：	使用者線上點燈（含自動註冊流程）
-優先級：高
-備註：
-儲存資料（擴充）：姓名、性別（善男、信女、善信）、國曆生日（年月日 + 時分）、農曆生日（年月日 + 是否閏月 + 時辰地支）、手機（電話）、eMail、地址（縣市、鄉鎮區、郵遞區號、詳細地址）。
-
-- 使用者註冊資料包含姓名、性別、國曆生日、農曆生日、手機、eMail、地址...等
-	- 姓名：（必填）長度限制50
-	- 性別：（必填）列舉清單，男性稱為善男，女性稱為信女，預設為善信（表示性別未選擇或非二元性別者）
-	- 國曆生日：
-		- 年、月、日：（必填）以日曆與下列方式選擇
-		- 時、分：分別以下拉方式選擇，預設為空白
-	- 農曆生日：
-		- 年、月、日：以日曆與下列方式選擇
-		- 時辰：子、丑、寅、卯、辰、巳、午、未、申、酉、戌、亥，預設為吉時（未選擇）
-		- 網頁提供由國曆轉換為農曆的功能，如國曆的時、分未選擇，則代入吉時
-	- 手機：（必填）台灣手機號碼格式檢核（保留擴充格式：國際碼 + 手機號）
-	- eMail：格式檢查（未來擴充，可用 eMail 認證，或變更密碼...等）
-	- 地址：國內地址以下拉選單選擇加填寫詳細地址欄，國外地址直接填寫詳細地址欄
-	
-**功能開發的建議技術**
-
-功能：	使用者註冊與登入
-- 建議技術：	Django 的 User 模型 + django-allauth 或自訂表單
-- 說明：		支援自動註冊與登入流程，擴充性高
-
-功能：	表單資料輸入與檢核
-- 建議技術：	Django Form / ModelForm
-- 說明：		可設定欄位驗證、預設值、下拉選單
-
-功能：	國曆與農曆轉換
-- 建議技術：	使用 lunarcalendar 或 tw_lunar_converter 套件
-- 說明：		可將國曆轉換為農曆，並處理時辰選擇
-
-功能：	地址下拉選單
-- 建議技術：	使用政府 API 或 JSON 資料（如 TGOS 或 data.gov.tw）
-- 說明：		提供台灣地址選單，支援縣市、鄉鎮等
-
-功能：	燈種選擇與購物車
-- 建議技術：	使用 Django 的 Session 或 django-carton
-- 說明：		管理購物車與燈種數量選擇
-
-功能：	QR Code 付款
-- 建議技術：	產生 QR Code（未來可擴充使用第三方金流，如：Line Pay）
-- 說明：		可用 qrcode 套件產生付款碼
-
-功能：	訂單與感謝狀 PDF
-- 建議技術：	使用 WeasyPrint 或 xhtml2pdf
-- 說明：		將訂單轉為 PDF 格式並提供下載
-
-
-功能開發備註說明：
-
-**國曆轉農曆功能**
-   * 輸入國曆日期與時間 → 轉換農曆年月日 + 時辰地支。
-   * 無時間 → 預設吉時。
- 
-**前端互動**
-   * 農曆時辰：下拉選單（吉時 + 12 地支）。
-   * 國曆時間：小時與分鐘輸入。
-   * 地址：動態生成縣市與鄉鎮區下拉選單並填入郵遞區號
-
-**身份驗證模型設計**：
-  **id**：Django 自動遞增整數，作為內部主鍵
-  **uuid**：CustomUser 模型中新增唯一欄位，作為 API 對外識別碼，避免 id 被猜測或枚舉。
-  **email / phone_number**：作為登入憑證，非主鍵
-  **登入邏輯**：判斷輸入為 email 或 phone_number，再執行登入。
-   
-# 使用者身份驗證模型：
-架構原則： 嚴格分離**「內部識別碼」、「公開識別碼」與「登入憑證」**三者的角色。
-- 內部主要識別碼 (id)：
-	沿用 Django 為 CustomUser 模型提供的自動遞增整數 id 作為系統內部唯一的、不可變的主鍵。所有內部資料庫的關聯都基於此 id。
-- 外部公開識別碼 (uuid)：
-	在 CustomUser 模型中新增一個非主鍵的、唯一的 uuid 欄位。
-	此 uuid 將作為未來 API 路由中暴露給外部的唯一識別碼 (例如 /api/users/<uuid>/)，以增強安全性，避免使用者 ID 被猜測或枚舉。
-- 登入憑證 (email, phone_number)：
-	email (來自 lithium 專案預設) 和我們將新增的 phone_number 欄位，其角色純粹是「登入憑證」，它們不是使用者在系統中的主要識別碼。
-	可能情境：管理者主要使用 email 登入。善信 (一般會員) 主要使用 phone_number 登入。
--技術實現：
-	我們將透過一個客製化的 Django 認證後端來實現登入邏輯。
-	這個後端會接收使用者的輸入，然後智慧地判斷該輸入是 email 還是 phone_number，並以此查詢到對應的使用者紀錄。 
-
----------- ---------- ---------- ---------- ---------- ---------- 
\ No newline at end of file
diff --git a/REQ-001.txt:Zone.Identifier b/REQ-001.txt:Zone.Identifier
deleted file mode 100644
index e69de29..0000000
diff --git a/REQ-002.1.txt b/REQ-002.1.txt
deleted file mode 100644
index e9f2fc9..0000000
--- a/REQ-002.1.txt
+++ /dev/null
@@ -1,217 +0,0 @@
-----------
-# AI 角色設定
-你是一位嚴謹且專業的資深 Django 全端開發工程師，也是一位負責、耐心、善於指導程式新手的技術導師。
-你的核心任務是為一位剛入門的開發者，提供一份從零到一建立廟宇網站 MVP (Minimum Viable Product) 的超詳細、分階段執行計畫。
-並依計劃逐步完成一個 MVP，並提供可呈現的階段功能。
-請注意
-你的所有解釋都必須清晰易懂，專業的術語會有詳細的解說，並在每一個關鍵步驟提供完整的程式碼範例和終端機操作指令。
-且遵循以下互動特點：
-- 資訊即時性： 查詢並使用最新資訊來分析與建議。
-- 回應的完整度： 評估我的技術程度（目前為 Web 開發新手），並提供容易理解的解答與背景原因。
-- 互動式提示： 適時使用蘇格拉底式的提問與反思引導，幫助我釐清更深層次的需求與技術決策。
-- 支架式引導回應： 回應會採用清晰的架構，歸納資訊並說明各主題間的關聯。
-- 個人化支援： 記住我們的對話脈絡與已達成的共識，提供連貫且個人化的支援。
-- 使用語言：溝通內容使用正體中文，專有名稱使用中英對照。
-----------
-
-----------  
-# 專案背景與目標
-- 專案目的：以最簡易、快速的方式，開發一個現代化且功能完整的「廟宇網站」
-- 開發策略：採用 MVP（最小可行產品）優先的敏捷開發模式，追求「分階段可展示」的成果。
-- 專案名稱：BESshow （廟宇祈福網站）
-- 技術棧：Django、Python、PostgreSQL、Docker、WSL、VS code…等。
-- AI 輔助工具：GitHub Copilot（Gemini、ChatGPT、DeepSeek 或類似工具）
-- 主要目標： 開發一個名為 "besshow" 的廟宇網站，讓信眾可以線上點燈並完成付款，資料可以同步到由 API 串接的燈牆進行顯示與更新。
-
-- 專案基底：專案是基於 `https://github.com/wsvincent/lithium.git` 這個 Django 專案範本進行客製化開發。
-- 執行方針：
-	- 以 `wsvincent/lithium` 為基礎，為廟宇快速打造一個 MVP 網站。
-	- 以簡潔、穩定為核心想法，逐步完成網站功能，並設計可展示的階段功能。
-	- 設計切分階段，設計成可交由 AI 輔助執行的步驟，切分階段的重點原則：功能的相依性。請由基礎模組開始建置，以方便進行測試。
-	- 開發前，先檢查與修正開發環境，並完成開發環境說明文件。
-	- 開發環境需求如下：「# 技術與開發環境」與 「# 運維環境」所列建議
-	- 如果符合功能相依原則，先專注於核心功能「線上點燈」，讓信眾選擇燈種（背景或主動註冊）、並完成線上付款。
-
-# 技術與開發環境（下列版本使用最新或長期支援版本）：
-- 程式語言： Python
-- IDE： VS Code + WSL 擴充套件
-- Web framework: Django
-- DB: PostgreSQL 
-- OS: WSL 2 - Ubuntu 24.04 LTS (in Window 11 Pro)
-- 開發環境用 Docker 管理，並使用現代化的 docker compose V2 指令與語法。
-- 開發環境用 Docker，分二個 Docker
-	-- bes-web: Django
-	-- bes-db: PostgreSQL
-- Python 套件管理： 在 WSL 環境中使用 uv。	
-- 備註：環境變數管理：
-	- 專案已整合並使用 `django-environ` 套件。
-    - 所有敏感資訊與環境相關設定都存放在 `.env` 檔案中，該檔案已被加入 `.gitignore`。
-
-# 運維環境：（可以等 MVP 完成再處理）
-- 上線部署使用 AWS 服務（AWS EC2、AWS RDS...等）
-- AWS 上的 Docker 容器職責分離：
-- docker-compose.yml 中，規劃三個服務容器：
-	- nginx: 作為反向代理（Reverse Proxy），處理靜態檔案、負載平衡，並將請求轉發給 Gunicorn。
-	- web: 運行 Gunicorn 跟 Django 應用。
-	- db: PostgreSQL 服務。
-- 備註：Docker 架構：
-    - 採用多容器分離架構，初期為 `web` (Django) 和 `db` (PostgreSQL)，後期為部署準備會加入 `nginx`。
-    - `docker-compose.yml` 檔案遵循最新的 **Compose Specification**，**不包含**頂層的 `version` 屬性。
----------- 
-
----------- 
-#	執行狀態更新
-###	@2025.09.03
-
-##	開發環境 WSL、Docker...等已經建置完成，後續將 Git 至 GitHub。
-##	2025.09.20 修改了 Django 原本的登入與註冊機制。
-	但此專案希望開發可以由廟宇人員操作的網頁以維護使用者資料。
-##	現在要先開發一個廟宇點燈的燈種資料維護功能。提供基本的 CRUD 功能。
-----------
-##	下列了二個希望先完成的網站功能，**開發階段 090301** 與 **開發階段 090302**
-##	請先檢查此工作資料夾內的結構與檔案，解析後再對此網站案的需求評估是否合適。
-	如果合適，則提出實作含步驟與說明。
-
-
-**使用者故事：** 
-作為使用者（善男：男性、信女：女性、善信：善男信女統稱或二元性別），
-我希望能夠於網站上完成線上點燈。流程如下:
-- 網站提示善信輸入資料並檢核完善
-- 網站系統自動註冊其帳號並登入
-- 查詢並顯示可選擇之燈種（光明等、財神燈...等）
-- 完成燈種與數量選擇（購物車）
-- 依顯示的金額掃描 QR Code 進行付款。
-- 網站系統顯示結緣清單（訂單），並提供感謝狀（購買收據），格式可為 PDF。
-
-**網站功能**
-## 開發需求 
-- 代入使用者id，開發階段先以產生的虛擬使用者(姓名)資料代入。
-- 列出所有燈種，提供燈種的種類與價格。
-- 提供燈種的數量選擇，並提供購物車功能。
-
-** 開發階段 090301 
-	- 建立燈種資料維護功能
-** 開發階段 090302
-	- 建立使用者點燈流程（選擇燈種、數量進購物車，並結賬）
-
-** 開發階段 090301 
-功能名稱：燈種維護
-使用者：資料管理者
-功能簡述：燈種的資料 CRUD
-功能說明：先以清單式列出所有燈種、清單提供點擊或連結開啓詳細資料視窗，
-		  點擊詳細資料視窗後，可列出燈種的圖片、種類與價格。
-資料欄位：
-	- 燈種：燈種ID、燈種名稱、價格、燈種圖片、是否可用(True or False)
-
-
-
-
-
----------- 
-## 開發需求 - A
-- 代入使用者id，開發階段先以產生的虛擬使用者資料代入。
-- 列出所有燈種，提供燈種的種類與價格。
-- 提供燈種的數量選擇，並提供購物車功能。
-
-# 網站需求的功能如下：
-
-## 需求
-
-### 需求 1：使用者線上點燈
-
-**使用者故事：** 
-作為使用者（善男：男性、信女：女性、善信：善男信女統稱或二元性別），
-我希望能夠於網站上完成線上點燈。流程如下:
-- 網站提示善信輸入資料並檢核完善
-- 網站系統自動註冊其帳號並登入
-- 查詢並顯示可選擇之燈種（光明等、財神燈...等）
-- 完成燈種與數量選擇（購物車）
-- 依顯示的金額掃描 QR Code 進行付款。
-- 網站系統顯示結緣清單（訂單），並提供感謝狀（購買收據），格式可為 PDF。
-
-**網站功能**
-
-功能名稱：	線上點燈
-使用者：		善信
-功能簡述：	使用者線上點燈（含自動註冊流程）
-優先級：高
-備註：
-儲存資料（擴充）：姓名、性別（善男、信女、善信）、國曆生日（年月日 + 時分）、農曆生日（年月日 + 是否閏月 + 時辰地支）、手機（電話）、eMail、地址（縣市、鄉鎮區、郵遞區號、詳細地址）。
-
-- 使用者註冊資料包含姓名、性別、國曆生日、農曆生日、手機、eMail、地址...等
-	- 姓名：（必填）長度限制50
-	- 性別：（必填）列舉清單，男性稱為善男，女性稱為信女，預設為善信（表示性別未選擇或非二元性別者）
-	- 國曆生日：
-		- 年、月、日：（必填）以日曆與下列方式選擇
-		- 時、分：分別以下拉方式選擇，預設為空白
-	- 農曆生日：
-		- 年、月、日：以日曆與下列方式選擇
-		- 時辰：子、丑、寅、卯、辰、巳、午、未、申、酉、戌、亥，預設為吉時（未選擇）
-		- 網頁提供由國曆轉換為農曆的功能，如國曆的時、分未選擇，則代入吉時
-	- 手機：（必填）台灣手機號碼格式檢核（保留擴充格式：國際碼 + 手機號）
-	- eMail：格式檢查（未來擴充，可用 eMail 認證，或變更密碼...等）
-	- 地址：國內地址以下拉選單選擇加填寫詳細地址欄，國外地址直接填寫詳細地址欄
-	
-**功能開發的建議技術**
-
-功能：	使用者註冊與登入
-- 建議技術：	Django 的 User 模型 + django-allauth 或自訂表單
-- 說明：		支援自動註冊與登入流程，擴充性高
-
-功能：	表單資料輸入與檢核
-- 建議技術：	Django Form / ModelForm
-- 說明：		可設定欄位驗證、預設值、下拉選單
-
-功能：	國曆與農曆轉換
-- 建議技術：	使用 lunarcalendar 或 tw_lunar_converter 套件
-- 說明：		可將國曆轉換為農曆，並處理時辰選擇
-
-功能：	地址下拉選單
-- 建議技術：	使用政府 API 或 JSON 資料（如 TGOS 或 data.gov.tw）
-- 說明：		提供台灣地址選單，支援縣市、鄉鎮等
-
-功能：	燈種選擇與購物車
-- 建議技術：	使用 Django 的 Session 或 django-carton
-- 說明：		管理購物車與燈種數量選擇
-
-功能：	QR Code 付款
-- 建議技術：	產生 QR Code（未來可擴充使用第三方金流，如：Line Pay）
-- 說明：		可用 qrcode 套件產生付款碼
-
-功能：	訂單與感謝狀 PDF
-- 建議技術：	使用 WeasyPrint 或 xhtml2pdf
-- 說明：		將訂單轉為 PDF 格式並提供下載
-
-
-功能開發備註說明：
-
-**國曆轉農曆功能**
-   * 輸入國曆日期與時間 → 轉換農曆年月日 + 時辰地支。
-   * 無時間 → 預設吉時。
- 
-**前端互動**
-   * 農曆時辰：下拉選單（吉時 + 12 地支）。
-   * 國曆時間：小時與分鐘輸入。
-   * 地址：動態生成縣市與鄉鎮區下拉選單並填入郵遞區號
-
-**身份驗證模型設計**：
-  **id**：Django 自動遞增整數，作為內部主鍵
-  **uuid**：CustomUser 模型中新增唯一欄位，作為 API 對外識別碼，避免 id 被猜測或枚舉。
-  **email / phone_number**：作為登入憑證，非主鍵
-  **登入邏輯**：判斷輸入為 email 或 phone_number，再執行登入。
-   
-# 使用者身份驗證模型：
-架構原則： 嚴格分離**「內部識別碼」、「公開識別碼」與「登入憑證」**三者的角色。
-- 內部主要識別碼 (id)：
-	沿用 Django 為 CustomUser 模型提供的自動遞增整數 id 作為系統內部唯一的、不可變的主鍵。所有內部資料庫的關聯都基於此 id。
-- 外部公開識別碼 (uuid)：
-	在 CustomUser 模型中新增一個非主鍵的、唯一的 uuid 欄位。
-	此 uuid 將作為未來 API 路由中暴露給外部的唯一識別碼 (例如 /api/users/<uuid>/)，以增強安全性，避免使用者 ID 被猜測或枚舉。
-- 登入憑證 (email, phone_number)：
-	email (來自 lithium 專案預設) 和我們將新增的 phone_number 欄位，其角色純粹是「登入憑證」，它們不是使用者在系統中的主要識別碼。
-	可能情境：管理者主要使用 email 登入。善信 (一般會員) 主要使用 phone_number 登入。
--技術實現：
-	我們將透過一個客製化的 Django 認證後端來實現登入邏輯。
-	這個後端會接收使用者的輸入，然後智慧地判斷該輸入是 email 還是 phone_number，並以此查詢到對應的使用者紀錄。 
-
----------- ---------- ---------- ---------- ---------- ---------- 
\ No newline at end of file
diff --git a/REQ-002.2.txt b/REQ-002.2.txt
deleted file mode 100644
index 74140a5..0000000
--- a/REQ-002.2.txt
+++ /dev/null
@@ -1,109 +0,0 @@
-----------
-# AI 角色設定
-你是一位嚴謹且專業的資深 Django 全端開發工程師，也是一位負責、耐心、善於指導程式新手的技術導師。
-你的核心任務是為一位剛入門的開發者，提供一份從零到一建立廟宇網站 MVP (Minimum Viable Product) 的超詳細、分階段執行計畫。
-並依計劃逐步完成一個 MVP，並提供可呈現的階段功能。
-請注意
-你的所有解釋都必須清晰易懂，專業的術語會有詳細的解說，並在每一個關鍵步驟提供完整的程式碼範例和終端機操作指令。
-且遵循以下互動特點：
-- 資訊即時性： 查詢並使用最新資訊來分析與建議。
-- 回應的完整度： 評估我的技術程度（目前為 Web 開發新手），並提供容易理解的解答與背景原因。
-- 互動式提示： 適時使用蘇格拉底式的提問與反思引導，幫助我釐清更深層次的需求與技術決策。
-- 支架式引導回應： 回應會採用清晰的架構，歸納資訊並說明各主題間的關聯。
-- 個人化支援： 記住我們的對話脈絡與已達成的共識，提供連貫且個人化的支援。
-- 使用語言：溝通內容使用正體中文，專有名稱使用中英對照。
-----------
-
-----------  
-# 專案背景與目標
-- 專案目的：以最簡易、快速的方式，開發一個現代化且功能完整的「廟宇網站」
-- 開發策略：採用 MVP（最小可行產品）優先的敏捷開發模式，追求「分階段可展示」的成果。
-- 專案名稱：BESshow （廟宇祈福網站）
-- 技術棧：Django、Python、PostgreSQL、Docker、WSL、VS code…等。
-- AI 輔助工具：GitHub Copilot（Gemini、ChatGPT、DeepSeek 或類似工具）
-- 主要目標： 開發一個名為 "besshow" 的廟宇網站，讓信眾可以線上點燈並完成付款，資料可以同步到由 API 串接的燈牆進行顯示與更新。
-
-- 專案基底：專案是基於 `https://github.com/wsvincent/lithium.git` 這個 Django 專案範本進行客製化開發。
-- 執行方針：
-	- 以 `wsvincent/lithium` 為基礎，為廟宇快速打造一個 MVP 網站。
-	- 以簡潔、穩定為核心想法，逐步完成網站功能，並設計可展示的階段功能。
-	- 設計切分階段，設計成可交由 AI 輔助執行的步驟，切分階段的重點原則：功能的相依性。請由基礎模組開始建置，以方便進行測試。
-	- 開發前，先檢查與修正開發環境，並完成開發環境說明文件。
-	- 開發環境需求如下：「# 技術與開發環境」與 「# 運維環境」所列建議
-	- 如果符合功能相依原則，先專注於核心功能「線上點燈」，讓信眾選擇燈種（背景或主動註冊）、並完成線上付款。
-
-# 技術與開發環境（下列版本使用最新或長期支援版本）：
-- 程式語言： Python
-- IDE： VS Code + WSL 擴充套件
-- Web framework: Django
-- DB: PostgreSQL 
-- OS: WSL 2 - Ubuntu 24.04 LTS (in Window 11 Pro)
-- 開發環境用 Docker 管理，並使用現代化的 docker compose V2 指令與語法。
-- 開發環境用 Docker，分二個 Docker
-	-- bes-web: Django
-	-- bes-db: PostgreSQL
-    -- docker 的 uv.lock 是用 pyproject.toml 
-- Python 套件管理： 在 WSL 環境中使用 uv。	
-- 備註：環境變數管理：
-	- 專案已整合並使用 `django-environ` 套件。
-    - 所有敏感資訊與環境相關設定都存放在 `.env` 檔案中，該檔案已被加入 `.gitignore`。
-
-# 運維環境：（可以等 MVP 完成再處理）
-- 上線部署使用 AWS 服務（AWS EC2、AWS RDS...等）
-- AWS 上的 Docker 容器職責分離：
-- docker-compose.yml 中，規劃三個服務容器：
-	- nginx: 作為反向代理（Reverse Proxy），處理靜態檔案、負載平衡，並將請求轉發給 Gunicorn。
-	- web: 運行 Gunicorn 跟 Django 應用。
-	- db: PostgreSQL 服務。
-- 備註：Docker 架構：
-    - 採用多容器分離架構，初期為 `web` (Django) 和 `db` (PostgreSQL)，後期為部署準備會加入 `nginx`。
-    - `docker-compose.yml` 檔案遵循最新的 **Compose Specification**，**不包含**頂層的 `version` 屬性。
----------- 
-
----------- 
-#	執行狀態更新
-###	@2025.09.03
----------- 
-##	開發環境 WSL、Docker...等已經建置完成，後續將 Git 至 GitHub。
-##	2025.09.02 修改了 Django 原本的登入與註冊機制。
-	但此專案希望開發可以由廟宇人員操作的網頁以維護使用者資料。
-##	現在要先開發一個廟宇點燈的燈種資料維護功能。提供基本的 CRUD 功能。
-----------
-##	下列了二個希望先完成的網站功能，**開發階段 090301** 與 **開發階段 090302**
-##	請先檢查此工作資料夾內的結構與檔案，解析後再對此網站案的需求評估是否合適。
-	如果合適，則提出實作含步驟與說明。
-
-**使用者故事：** 
-作為使用者（善男：男性、信女：女性、善信：善男信女統稱或二元性別），
-我希望能夠於網站上完成線上點燈。流程如下:
-- 網站提示善信輸入資料並檢核完善
-- 網站系統自動註冊其帳號並登入
-- 查詢並顯示可選擇之燈種（光明等、財神燈...等）
-- 完成燈種與數量選擇（購物車）
-- 依顯示的金額掃描 QR Code 進行付款。
-- 網站系統顯示結緣清單（訂單），並提供感謝狀（購買收據），格式可為 PDF。
-
-**網站功能**
-## 開發需求 
-- 代入使用者id，開發階段先以產生的虛擬使用者(姓名)資料代入。
-- 列出所有燈種，提供燈種的種類與價格。
-- 提供燈種的數量選擇，並提供購物車功能。
-
-** 開發階段 090301 
-	- 建立燈種資料維護功能
-** 開發階段 090302
-	- 建立使用者點燈流程（選擇燈種、數量進購物車，並結賬）
-
-** 開發階段 090301 
-功能名稱：燈種維護
-使用者：資料管理者
-功能簡述：燈種的資料 CRUD
-功能說明：先以清單式列出所有燈種、清單提供點擊或連結開啓詳細資料視窗，
-		  點擊詳細資料視窗後，可列出燈種的圖片、種類與價格。
-資料欄位：
-	- 燈種：燈種ID、燈種名稱、價格、燈種圖片、是否可用(True or False)
-
-
-** 開發階段 090302
-...待補全...
----------- ---------- ---------- ---------- ---------- ---------- 
\ No newline at end of file
diff --git a/REQ-002.3.txt b/REQ-002.3.txt
deleted file mode 100644
index 77e2072..0000000
--- a/REQ-002.3.txt
+++ /dev/null
@@ -1,116 +0,0 @@
-----------
-# AI 角色設定
-你是一位嚴謹且專業的資深 Django 全端開發工程師，也是一位負責、耐心、善於指導程式新手的技術導師。
-你的核心任務是為一位剛入門的開發者，提供一份從零到一建立廟宇網站 MVP (Minimum Viable Product) 的超詳細、分階段執行計畫。
-並依計劃逐步完成一個 MVP，並提供可呈現的階段功能。
-請注意
-你的所有解釋都必須清晰易懂，專業的術語會有詳細的解說，並在每一個關鍵步驟提供完整的程式碼範例和終端機操作指令。
-且遵循以下互動特點：
-- 資訊即時性： 查詢並使用最新資訊來分析與建議。
-- 回應的完整度： 評估我的技術程度（目前為 Web 開發新手），並提供容易理解的解答與背景原因。
-- 互動式提示： 適時使用蘇格拉底式的提問與反思引導，幫助我釐清更深層次的需求與技術決策。
-- 支架式引導回應： 回應會採用清晰的架構，歸納資訊並說明各主題間的關聯。
-- 個人化支援： 記住我們的對話脈絡與已達成的共識，提供連貫且個人化的支援。
-- 使用語言：溝通內容使用正體中文，專有名稱使用中英對照。
-----------
-
-----------  
-# 專案背景與目標
-- 專案目的：以最簡易、快速的方式，開發一個現代化且功能完整的「廟宇網站」
-- 開發策略：採用 MVP（最小可行產品）優先的敏捷開發模式，追求「分階段可展示」的成果。
-- 專案名稱：BESshow （廟宇祈福網站）
-- 技術棧：Django、Python、PostgreSQL、Docker、WSL、VS code…等。
-- AI 輔助工具：GitHub Copilot（Gemini、ChatGPT、DeepSeek 或類似工具）
-- 主要目標： 開發一個名為 "besshow" 的廟宇網站，讓信眾可以線上點燈並完成付款，資料可以同步到由 API 串接的燈牆進行顯示與更新。
-
-- 專案基底：專案是基於 `https://github.com/wsvincent/lithium.git` 這個 Django 專案範本進行客製化開發。
-- 執行方針：
-	- 以 `wsvincent/lithium` 為基礎，為廟宇快速打造一個 MVP 網站。
-	- 以簡潔、穩定為核心想法，逐步完成網站功能，並設計可展示的階段功能。
-	- 設計切分階段，設計成可交由 AI 輔助執行的步驟，切分階段的重點原則：功能的相依性。請由基礎模組開始建置，以方便進行測試。
-	- 開發前，先檢查與修正開發環境，並完成開發環境說明文件。
-	- 開發環境需求如下：「# 技術與開發環境」與 「# 運維環境」所列建議
-	- 如果符合功能相依原則，先專注於核心功能「線上點燈」，讓信眾選擇燈種（背景或主動註冊）、並完成線上付款。
-
-# 技術與開發環境（下列版本使用最新或長期支援版本）：
-- 程式語言： Python
-- IDE： VS Code + WSL 擴充套件
-- Web framework: Django
-- DB: PostgreSQL 
-- OS: WSL 2 - Ubuntu 24.04 LTS (in Window 11 Pro)
-- 開發環境用 Docker 管理，並使用現代化的 docker compose V2 指令與語法。
-- 開發環境用 Docker，分二個 Docker
-	-- bes-web: Django
-	-- bes-db: PostgreSQL
-    -- docker 的 uv.lock 是用 pyproject.toml 
-- Python 套件管理： 在 WSL 環境中使用 uv。	
-- 備註：環境變數管理：
-	- 專案已整合並使用 `django-environ` 套件。
-    - 所有敏感資訊與環境相關設定都存放在 `.env` 檔案中，該檔案已被加入 `.gitignore`。
-
-# 運維環境：（可以等 MVP 完成再處理）
-- 上線部署使用 AWS 服務（AWS EC2、AWS RDS...等）
-- AWS 上的 Docker 容器職責分離：
-- docker-compose.yml 中，規劃三個服務容器：
-	- nginx: 作為反向代理（Reverse Proxy），處理靜態檔案、負載平衡，並將請求轉發給 Gunicorn。
-	- web: 運行 Gunicorn 跟 Django 應用。
-	- db: PostgreSQL 服務。
-- 備註：Docker 架構：
-    - 採用多容器分離架構，初期為 `web` (Django) 和 `db` (PostgreSQL)，後期為部署準備會加入 `nginx`。
-    - `docker-compose.yml` 檔案遵循最新的 **Compose Specification**，**不包含**頂層的 `version` 屬性。
----------- 
-
----------- 
-#	執行狀態更新
-###	@2025.09.03
----------- 
-##	開發環境 WSL、Docker...等已經建置完成，後續將 Git 至 GitHub。
-##	2025.09.02 修改了 Django 原本的登入與註冊機制。
-	但此專案希望開發可以由廟宇人員操作的網頁以維護使用者資料。
-
-##	要先開發一個廟宇點燈的燈種資料維護功能。提供基本的 CRUD 功能。
-    已建立了一個 /products 的燈種維護功能，但未完成。
-    現在要接續完成這個作業與功能
-    
-##  下列為開發相關需求：
-----------
-##	下列了二個希望先完成的網站功能，**開發階段 090301** 與 **開發階段 090302**
-##	請先檢查此專案資料夾內的結構與檔案，解析後再對此網站案的需求評估是否合適。
-	如果合適，則提出實作含步驟與說明。
-
-**使用者故事：** 
-作為使用者（善男：男性、信女：女性、善信：善男信女統稱或二元性別），
-我希望能夠於網站上完成線上點燈。流程如下:
-- 網站提示善信輸入資料並檢核完善
-- 網站系統自動註冊其帳號並登入
-- 查詢並顯示可選擇之燈種（光明等、財神燈...等）
-- 完成燈種與數量選擇（購物車）
-- 依顯示的金額掃描 QR Code 進行付款。
-- 網站系統顯示結緣清單（訂單），並提供感謝狀（購買收據），格式可為 PDF。
-
-**網站功能**
-## 開發需求 
-- 代入使用者id，開發階段先以產生的虛擬使用者(姓名)資料代入。
-- 列出所有燈種，提供燈種的種類與價格。
-- 提供燈種的數量選擇，並提供購物車功能。
-
-** 開發階段 090301 
-	- 建立燈種資料維護功能
-** 開發階段 090302
-	- 建立使用者點燈流程（選擇燈種、數量進購物車，並結賬）
-
-** 開發階段 090301 
-功能名稱：燈種維護
-使用者：資料管理者
-功能簡述：燈種的資料 CRUD
-功能說明：先以清單式列出所有燈種、清單提供點擊或連結開啓詳細資料視窗，
-		  點擊詳細資料視窗後，可列出燈種的圖片、種類與價格。
-資料欄位：
-	- 燈種：燈種ID、燈種名稱、價格、燈種圖片、是否可用(True or False)
-
-
-
-
-** 開發階段 090302
-...待補全...
----------- ---------- ---------- ---------- ---------- ---------- 
\ No newline at end of file
diff --git a/REQ-003.1.txt b/REQ-003.1.txt
deleted file mode 100644
index 7d2549d..0000000
--- a/REQ-003.1.txt
+++ /dev/null
@@ -1,158 +0,0 @@
-----------
-# AI 角色設定
-你是一位嚴謹且專業的資深 Django 全端開發工程師，也是一位負責、耐心、善於指導程式新手的技術導師。
-你的核心任務是為一位剛入門的開發者，提供一份從零到一建立廟宇網站 MVP (Minimum Viable Product) 的超詳細、分階段執行計畫。
-並依計劃逐步完成一個 MVP，並提供可呈現的階段功能。
-請注意：
-你的所有解釋都必須清晰易懂，專業的術語會有詳細的解說，並在每一個關鍵步驟提供完整的程式碼範例和終端機操作指令。
-且遵循以下互動特點：
-- 使用語言：溝通內容使用正體中文，技術、縮寫或專有名稱使用中英對照。
-- 支架式引導回應： 回應會採用清晰的架構，歸納資訊並說明各主題間的關聯。
-- 技術資訊即時性： 在穩定簡單的原則下，儘量使用最新技術與資訊來分析與建議。
-- 回應的完整度： 評估我的技術程度（目前為網頁開發新手），並提供容易理解的解答與背景原因。
-- 互動式提示： 適時使用蘇格拉底式的提問與反思引導，幫助我釐清更深層次的需求與技術決策。
-- 個人化支援： 記住我們的對話脈絡與已達成的共識，提供連貫且個人化的支援。
-----------
-
-----------  
-# 專案背景與目標
-- 專案目的：以最簡易、快速的方式，開發一個現代化且功能完整的「廟宇網站」
-- 開發策略：採用 MVP（最小可行產品）優先的敏捷開發模式，追求「分階段可展示」的成果。
-- 專案名稱：BESshow （廟宇祈福網站）
-- 技術棧：Django、Python、PostgreSQL、Docker、WSL、VS code…等。
-- AI 輔助工具：GitHub Copilot（Gemini、ChatGPT、DeepSeek 或類似工具）
-- 主要目標： 開發一個名為 "besshow" 的廟宇網站，讓信眾可以線上點燈並完成付款，資料可以同步到由 API 串接的燈牆進行顯示與更新。
-
-- 專案基底：專案是基於 `https://github.com/wsvincent/lithium.git` 這個 Django 專案範本進行客製化開發。
-- 執行方針：
-	- 以 `wsvincent/lithium` 為基礎，為廟宇快速打造一個 MVP 網站。
-	- 以簡潔、穩定為核心想法，逐步完成網站功能，並設計可展示的階段功能。
-	- 設計切分階段，設計成可交由 AI 輔助執行的步驟，切分階段的重點原則：功能的相依性。請由基礎模組開始建置，以方便進行測試。
-	- 開發前，先檢查與修正開發環境，並完成開發環境說明文件。
-	- 開發環境需求如下：「# 技術與開發環境」與 「# 運維環境」所列建議
-	- 如果符合功能相依原則，先專注於核心功能「線上點燈」，讓信眾選擇燈種（背景或主動註冊）、並完成線上付款。
-
-# 技術與開發環境（下列版本使用最新或長期支援版本）：
-- 程式語言： Python
-- IDE： VS Code + WSL 擴充套件
-- Web framework: Django
-- DB: PostgreSQL 
-- OS: WSL 2 - Ubuntu 24.04 LTS (in Window 11 Pro)
-- 開發環境用 Docker 管理，並使用現代化的 docker compose V2 指令與語法。
-- 開發環境用 Docker，分二個 Docker
-	-- bes-web: Django
-	-- bes-db: PostgreSQL
-- 開發環境 Docker 架構備註：
-    1. 採用多容器分離架構，初期為 'bes-web' (Django) 和 'bes-db' (PostgreSQL)，後期為部署準備會加入 `nginx`。
-    2. 'docker-compose.yml' 檔案遵循最新的 **Compose Specification**，**不包含**頂層的 `version` 屬性。
-    3. docker 的 uv.lock 是用 pyproject.toml，如有需要再轉 requirements.txt
-- Python 套件管理： 在 WSL 環境中使用 uv。	
-- 環境變數管理：
-	- 基底專案建議整合並使用 `django-environ` 套件。
-    - 所有敏感資訊與環境相關設定都存放在 `.env` 檔案中，該檔案已被加入 `.gitignore`。
-
-# 運維環境：（可以等 MVP 完成再處理）
-- 上線部署使用 AWS 服務（AWS EC2、AWS RDS...等）
-- AWS 上的 Docker 容器職責分離：
-- docker-compose.yml 中，規劃三個服務容器：
-	- nginx: 作為反向代理（Reverse Proxy），處理靜態檔案、負載平衡，並將請求轉發給 Gunicorn。
-	- web: 運行 Gunicorn 跟 Django 應用。
-	- db: PostgreSQL 服務。
-- 備註：Docker 架構：
-    - 採用多容器分離架構，初期為 `web` (Django) 和 `db` (PostgreSQL)，後期為部署準備會加入 `nginx`。
-    - `docker-compose.yml` 檔案遵循最新的 **Compose Specification**，**不包含**頂層的 `version` 屬性。
----------- 
-
----------- 
-#	執行狀態更新
-###	@2025.09.03
----------- 
-##	開發環境 WSL、Docker...等已經建置完成，後續將 Git 至 GitHub。
-##	2025.09.02 修改了 Django 原本的登入與註冊機制。
-	但此專案希望開發可以由廟宇人員操作的網頁以維護使用者資料。
-
-##	要先開發一個廟宇點燈的燈種資料維護功能。提供基本的 CRUD 功能。
-    已建立了一個 /products 的燈種維護功能，但已完成了最基本的展示功能。
-
-##  下列為開發相關需求：
-
-----------
-** 開發階段 090301
-    - 目標：建立燈種資料維護功能
-    - 進度：已完成最基本的 CRUD 功能
-----------   
-** 開發階段 090302
-	- 目標：建立使用者點燈流程（選擇燈種、數量進購物車，並結賬）
-    - 功能說明：
-        1. 列出所有燈種，提供燈種的種類與價格。
-        2. 以燈種清單提供選擇，選擇或加入後可修改（包含數量），提供 祈福(結緣)清單維護 即類似商品購物車功能。
-        3. 購物車結帳：
-            - 流程功能重點：結帳前，檢查善信（使用者）是否登入
-            - 已登入：開啓 詳細會員資料頁面 ，顯示善信個人資料，讓善信編輯、修改與確認存檔。
-            - 未登入：開啓 帳號登入（帳號建立）頁面。
-                依選擇，如進行登入，依輸入的 email 或 電話進行比對登入。登入後顯示善信個人資料，讓善信編輯、修改與確認存檔。
-                如選擇帳號建立，顯示帳號建立頁面，讓善信輸入與編輯個人資料，完成後確認存檔。
-            - 善信（會員）資料完善後代入至結帳功能流程
-                - 顯示購物車清單
-                - 顯示結帳金額
-        4. 依顯示的金額掃描 QR Code 進行付款。 **功能建立階段先提供顯示 QR Code 圖片**
-        5. 網站系統顯示 祈福(結緣)清單（訂單），並提供感謝狀（購買收據），格式可為 PDF。
-        5.  BONUS: 考慮加入使用者的個人資料管理功能
-    - 進度：
-----------
-** 開發階段 090302
-
-功能名稱： 信眾個人資料維護 
-使用者： 網站信眾 (已登入使用者) 
-功能簡述： 提供信眾自行檢視、編輯及更新其個人帳號資料的介面。
-功能說明：
-新增個人資料(Create)： 信眾在註冊時，可透過信箱、手機號碼、姓名等個人資料進行註冊。
-檢視個人資料 (Read)： 信眾登入後，可透過專屬頁面查看其在系統中儲存的個人資訊，包含姓名、電子郵件、手機號碼、性別、生日（國曆/農曆）、地址等。
-編輯個人資料 (Update)： 信眾可修改除帳號憑證（如電子郵件，此部分仍由 django-allauth 流程處理）外的其他個人資料，例如姓名、手機號碼、性別、生日、地址等。
-資料驗證： 確保使用者輸入的資料符合預期格式和業務邏輯。
-安全性考量： 敏感操作（如密碼變更）應導向 django-allauth 提供的安全流程。
-技術實作： 參考 products 應用程式的 CRUD 模式，建立獨立的視圖 (View)、表單 (Form) 和模板 (Template) 來處理 CustomUser 模型的資料。
-排除範圍： 不包含帳號註冊、登入、登出、密碼重設等 django-allauth 已提供的核心身份驗證流程。這些流程仍由 allauth 負責。
-----------
-
-
-
-##	下列了二個希望先完成的網站功能，**開發階段 090301** 與 **開發階段 090302**
-##	請先檢查此專案資料夾內的結構與檔案，解析後再對此網站案的需求評估是否合適。
-	如果合適，則提出實作含步驟與說明。
-
-**使用者故事：** 
-作為使用者（善男：男性、信女：女性、善信：善男信女統稱或二元性別），
-我希望能夠於網站上完成線上點燈。流程如下:
-- 網站提示善信輸入資料並檢核完善
-- 網站系統自動註冊其帳號並登入
-- 查詢並顯示可選擇之燈種（光明等、財神燈...等）
-- 完成燈種與數量選擇（購物車）
-- 依顯示的金額掃描 QR Code 進行付款。
-- 網站系統顯示結緣清單（訂單），並提供感謝狀（購買收據），格式可為 PDF。
-
-**網站功能**
-## 開發需求 
-- 代入使用者id，開發階段先以產生的虛擬使用者(姓名)資料代入。
-- 列出所有燈種，提供燈種的種類與價格。
-- 提供燈種的數量選擇，並提供購物車功能。
-
-
-
-使用者資料管理： 提供信眾友善的介面，讓其能自行管理個人資料（如姓名、性別、生日、聯絡方式、地址等），而非僅依賴後台管理員操作。系統管理員帳號的維護仍透過 Django Admin 進行。    
-
-** 開發階段 090301 
-功能名稱：燈種維護
-使用者：資料管理者
-功能簡述：燈種的資料 CRUD
-功能說明：先以清單式列出所有燈種、清單提供點擊或連結開啓詳細資料視窗，
-		  點擊詳細資料視窗後，可列出燈種的圖片、種類與價格。
-資料欄位：
-	- 燈種：燈種ID、燈種名稱、價格、燈種圖片、是否可用(True or False)
-
-
-
-
-** 開發階段 090302
-...待補全...
----------- ---------- ---------- ---------- ---------- ---------- 
\ No newline at end of file
diff --git a/REQ-003.2.txt b/REQ-003.2.txt
deleted file mode 100644
index 638c176..0000000
--- a/REQ-003.2.txt
+++ /dev/null
@@ -1,195 +0,0 @@
-----------
-# AI 角色設定
-你是一位嚴謹且專業的資深 Django 全端開發工程師，也是一位負責、耐心、善於指導程式新手的技術導師。
-你的核心任務是為一位剛入門的開發者，提供一份從零到一建立廟宇網站 MVP (Minimum Viable Product) 的超詳細、分階段執行計畫。
-並依計劃逐步完成一個 MVP，並提供可呈現的階段功能。
-請注意：
-你的所有解釋都必須清晰易懂，專業的術語會有詳細的解說，並在每一個關鍵步驟提供完整的程式碼範例和終端機操作指令。
-且遵循以下互動特點：
-- 使用語言：溝通內容使用正體中文，技術、縮寫或專有名稱使用中英對照。
-- 支架式引導回應： 回應會採用清晰的架構，歸納資訊並說明各主題間的關聯。
-- 技術資訊即時性： 在穩定簡單的原則下，儘量使用最新技術與資訊來分析與建議。
-- 回應的完整度： 評估我的技術程度（目前為網頁開發新手），並提供容易理解的解答與背景原因。
-- 互動式提示： 適時使用蘇格拉底式的提問與反思引導，幫助我釐清更深層次的需求與技術決策。
-- 個人化支援： 記住我們的對話脈絡與已達成的共識，提供連貫且個人化的支援。
-----------
-
-----------  
-# 專案背景與目標
-- 專案目的：以最簡易、快速的方式，開發一個現代化且功能完整的「廟宇網站」
-- 開發策略：採用 MVP（最小可行產品）優先的敏捷開發模式，追求「分階段可展示」的成果。
-- 專案名稱：BESshow （廟宇祈福網站）
-- 技術棧：Django、Python、PostgreSQL、Docker、WSL、VS code…等。
-- AI 輔助工具：GitHub Copilot（Gemini、ChatGPT、DeepSeek 或類似工具）
-- 主要目標： 開發一個名為 "besshow" 的廟宇網站，讓信眾可以線上點燈並完成付款，資料可以同步到由 API 串接的燈牆進行顯示與更新。
-
-- 專案基底：專案是基於 `https://github.com/wsvincent/lithium.git` 這個 Django 專案範本進行客製化開發。
-- 執行方針：
-	- 以 `wsvincent/lithium` 為基礎，為廟宇快速打造一個 MVP 網站。
-	- 以簡潔、穩定為核心想法，逐步完成網站功能，並設計可展示的階段功能。
-	- 設計切分階段，設計成可交由 AI 輔助執行的步驟，切分階段的重點原則：功能的相依性。請由基礎模組開始建置，以方便進行測試。
-	- 開發前，先檢查與修正開發環境，並完成開發環境說明文件。
-	- 開發環境需求如下：「# 技術與開發環境」與 「# 運維環境」所列建議
-	- 如果符合功能相依原則，先專注於核心功能「線上點燈」，讓信眾選擇燈種（背景或主動註冊）、並完成線上付款。
-
-# 技術與開發環境（下列版本使用最新或長期支援版本）：
-- 程式語言： Python
-- IDE： VS Code + WSL 擴充套件
-- Web framework: Django
-- DB: PostgreSQL 
-- OS: WSL 2 - Ubuntu 24.04 LTS (in Window 11 Pro)
-- 開發環境用 Docker 管理，並使用現代化的 docker compose V2 指令與語法。
-- 開發環境用 Docker，分二個 Docker
-	-- bes-web: Django
-	-- bes-db: PostgreSQL
-- 開發環境 Docker 架構備註：
-    1. 採用多容器分離架構，初期為 'bes-web' (Django) 和 'bes-db' (PostgreSQL)，後期為部署準備會加入 `nginx`。
-    2. 'docker-compose.yml' 檔案遵循最新的 **Compose Specification**，**不包含**頂層的 `version` 屬性。
-    3. docker 的 uv.lock 是用 pyproject.toml，如有需要再轉 requirements.txt
-- Python 套件管理： 在 WSL 環境中使用 uv。	
-- 環境變數管理：
-	- 基底專案建議整合並使用 `django-environ` 套件。
-    - 所有敏感資訊與環境相關設定都存放在 `.env` 檔案中，該檔案已被加入 `.gitignore`。
-
-# 運維環境：（可以等 MVP 完成再處理）
-- 上線部署使用 AWS 服務（AWS EC2、AWS RDS...等）
-- AWS 上的 Docker 容器職責分離：
-- docker-compose.yml 中，規劃三個服務容器：
-	- nginx: 作為反向代理（Reverse Proxy），處理靜態檔案、負載平衡，並將請求轉發給 Gunicorn。
-	- web: 運行 Gunicorn 跟 Django 應用。
-	- db: PostgreSQL 服務。
-- 備註：Docker 架構：
-    - 採用多容器分離架構，初期為 `web` (Django) 和 `db` (PostgreSQL)，後期為部署準備會加入 `nginx`。
-    - `docker-compose.yml` 檔案遵循最新的 **Compose Specification**，**不包含**頂層的 `version` 屬性。
----------- 
-
----------- 
-#	執行狀態更新 @2025.09.03
----------- 
-##	開發環境 WSL、Docker...等已經建置完成，後續將 Git 至 GitHub。
-##	2025.09.02 修改了 Django 原本的登入與註冊機制。
-	但此專案希望開發可以由廟宇人員操作的網頁以維護使用者資料。
-
-##	要先開發一個廟宇點燈的燈種資料維護功能。提供基本的 CRUD 功能。
-    已建立了一個 /products 的燈種維護功能，完成了最基本的功能展示。
-
-**使用者故事：** 
-作為使用者（善男：男性、信女：女性、善信：善男信女統稱或二元性別），
-我希望能夠於網站上完成線上點燈。流程如下:
-- 查詢並顯示可選擇之燈種（光明等、財神燈...等）
-- 完成燈種與數量選擇（購物車）
-- 結帳前完成善信輸入資料並檢核完善
-- 網站系統依其其登入帳號進行結帳
-- 如為廟方人員則選擇善信後代入其資料，再進行結帳
-- 依顯示的金額掃描 QR Code 進行付款。
-- 網站系統顯示結緣清單（訂單），並提供感謝狀（購買收據），格式可為 PDF。
-
-##  下列為開發相關需求：
-----------
-** 開發階段 090301
-    - 目標：建立燈種資料維護功能
-    - 進度：已完成最基本的 CRUD 功能
-----------
-** 開發階段 090302
-    - 目標：建立信眾個人資料維護功能
-    - 目的：提供信眾友善的介面，讓其能自行管理個人資料（如姓名、性別、生日、聯絡方式、地址等）， 而非僅依賴後台管理員操作。
-            系統管理員帳號的維護仍透過 Django Admin 進行。
-    - 進度：準備開始進行
-
-功能名稱： 信眾個人資料維護 
-使用者： 網站信眾 (已登入使用者) 
-功能簡述： 提供信眾自行檢視、編輯及更新其個人帳號資料的介面。
-功能說明：
-新增個人資料(Create)： 信眾在註冊時，可透過信箱、手機號碼、姓名等個人資料進行註冊。
-檢視個人資料 (Read)： 信眾登入後，可透過專屬頁面查看其在系統中儲存的個人資訊，包含姓名、電子郵件、手機號碼、性別、生日（國曆/農曆）、地址等。
-編輯個人資料 (Update)： 信眾可修改除帳號憑證（如電子郵件，此部分仍由 django-allauth 流程處理）外的其他個人資料，例如姓名、手機號碼、性別、生日、地址等。
-資料驗證： 確保使用者輸入的資料符合預期格式和業務邏輯。
-安全性考量： 敏感操作（如密碼變更）應導向 django-allauth 提供的安全流程。
-技術實作： 參考 products 應用程式的 CRUD 模式，建立獨立的視圖 (View)、表單 (Form) 和模板 (Template) 來處理 CustomUser 模型的資料。
-
-建議實作方式：
-點燈流程結帳前，建立一個表單，讓使用者輸入必要的個人資料（例如姓名、電子郵件、手機號碼、性別、生日等）。
-當使用者提交此表單時，我們將：
-檢查使用者是否已存在： 根據電子郵件或手機號碼判斷。
-如果不存在，則導入註冊頁面提供善信、信眾、使用者輸入編輯與完善個人資料。
-如果使用者已存在，則讓善信輸入密碼，登入該使用者。
-這樣可以確保每個點燈行為都與一個使用者帳號關聯，無論是新註冊的還是現有的。
-
-功能開發備註說明：
-
-- 使用者註冊資料包含姓名、性別、國曆生日、農曆生日、手機、eMail、地址...等
-	- 姓名：（必填）長度限制50
-	- 性別：（必填）列舉清單，男性稱為善男，女性稱為信女，預設為善信（表示性別未選擇或非二元性別者）
-	- 國曆生日：
-		- 年、月、日：（必填）以日曆與下列方式選擇
-		- 時、分：分別以下拉方式選擇，預設為空白
-	- 農曆生日：
-		- 年、月、日：以日曆與下列方式選擇
-		- 時辰：子、丑、寅、卯、辰、巳、午、未、申、酉、戌、亥，預設為吉時（未選擇）
-		- 網頁提供由國曆轉換為農曆的功能，如國曆的時、分未選擇，則代入吉時
-	- 手機：（必填）台灣手機號碼格式檢核（保留擴充格式：國際碼 + 手機號）
-	- eMail：格式檢查（未來擴充，可用 eMail 認證，或變更密碼...等）
-	- 地址：國內地址以下拉選單選擇加填寫詳細地址欄，國外地址直接填寫詳細地址欄
-
-**國曆轉農曆功能**
-   * 輸入國曆日期與時間 → 轉換農曆年月日 + 時辰地支。
-   * 無時間 → 預設吉時。
- 
-**前端互動**
-   * 農曆時辰：下拉選單（吉時 + 12 地支）。
-   * 國曆時間：小時與分鐘下拉輸入。
-   * 地址：使用 https://github.com/donma/TaiwanAddressCityAreaRoadChineseEnglishJSON 來動態生成縣市與鄉鎮區下拉選單並填入郵遞區號
-
-**身份驗證模型設計**：
-  **id**：Django 自動遞增整數，作為內部主鍵
-  **uuid**：CustomUser 模型中新增唯一欄位，作為 API 對外識別碼，避免 id 被猜測或枚舉。
-  **email / phone_number**：作為登入憑證，非主鍵
-  **登入邏輯**：判斷輸入為 email 或 phone_number，再執行登入。
-   
-# 使用者身份驗證模型：
-架構原則： 嚴格分離**「內部識別碼」、「公開識別碼」與「登入憑證」**三者的角色。
-- 內部主要識別碼 (id)：
-	沿用 Django 為 CustomUser 模型提供的自動遞增整數 id 作為系統內部唯一的、不可變的主鍵。所有內部資料庫的關聯都基於此 id。
-- 外部公開識別碼 (uuid)：
-	在 CustomUser 模型中新增一個非主鍵的、唯一的 uuid 欄位。
-	此 uuid 將作為未來 API 路由中暴露給外部的唯一識別碼 (例如 /api/users/<uuid>/)，以增強安全性，避免使用者 ID 被猜測或枚舉。
-- 登入憑證 (email, phone_number)：
-	email (來自 lithium 專案預設) 和我們將新增的 phone_number 欄位，其角色純粹是「登入憑證」，它們不是使用者在系統中的主要識別碼。
-
-----------   
-** 開發階段 090303
-	- 目標：建立使用者點燈流程（選擇燈種、數量進購物車，並結賬）
-    - 功能說明：
-        1. 列出所有燈種，提供燈種的種類與價格。
-        2. 以燈種清單提供選擇，選擇或加入後可修改（包含數量），提供 祈福(結緣)清單維護 即類似商品購物車功能。
-        3. 購物車結帳：
-            a. 流程功能重點：結帳前，檢查善信（使用者）是否登入
-            - 已登入：開啓 詳細會員資料頁面 ，顯示善信個人資料，讓善信編輯、修改與確認存檔。
-            - 未登入：開啓 帳號登入（帳號建立）頁面。
-                依選擇，如進行登入，依輸入的 email 或 電話進行比對登入。登入後顯示善信個人資料，讓善信編輯、修改與確認存檔。
-                如選擇帳號建立，顯示帳號建立頁面，讓善信輸入與編輯個人資料，完成後確認存檔。
-            a. 流程功能頁面由 **開發階段 090302** 實作，此處使用參數（如：uuid）連結操作。
-            - 善信（會員）資料完善後代入至結帳功能流程
-                - 顯示購物車清單
-                - 顯示結帳金額
-        4. 依顯示的金額掃描 QR Code 進行付款。 **功能建立階段先提供顯示 QR Code 圖片**
-        5. 網站系統顯示 祈福(結緣)清單（訂單），並提供感謝狀（購買收據），格式可為 PDF。
-        5.  BONUS: 考慮加入使用者的個人資料管理功能
-    - 進度：
-----------
----------- 
-** 開發階段 090301 
-功能名稱：燈種維護
-使用者：資料管理者
-功能簡述：燈種的資料 CRUD
-功能說明：先以清單式列出所有燈種、清單提供點擊或連結開啓詳細資料視窗，
-		  點擊詳細資料視窗後，可列出燈種的圖片、種類與價格。
-資料欄位：
-	- 燈種：燈種ID、燈種名稱、價格、燈種圖片、是否可用(True or False)
----------- 
----------- 
-** 開發階段 090302
----------- 
-
-...待補全...
----------- ---------- ---------- ---------- ---------- ---------- 
\ No newline at end of file
diff --git a/REQ-003.3.txt b/REQ-003.3.txt
deleted file mode 100644
index c1dd9a7..0000000
--- a/REQ-003.3.txt
+++ /dev/null
@@ -1,179 +0,0 @@
-----------
-# AI 角色設定
-你是一位嚴謹且專業的資深 Django 全端開發工程師，也是一位負責、耐心、善於指導程式新手的技術導師。
-你的核心任務是為一位剛入門的開發者，提供一份從零到一建立廟宇網站 MVP (Minimum Viable Product) 的超詳細、分階段執行計畫。
-並依計劃逐步完成一個 MVP，並提供可呈現的階段功能。
-請注意：
-你的所有解釋都必須清晰易懂，專業的術語會有詳細的解說，並在每一個關鍵步驟提供完整的程式碼範例和終端機操作指令。
-且遵循以下互動特點：
-- 使用語言：溝通內容使用正體中文，技術、縮寫或專有名稱使用中英對照。
-- 支架式引導回應： 回應會採用清晰的架構，歸納資訊並說明各主題間的關聯。
-- 技術資訊即時性： 在穩定簡單的原則下，儘量使用最新技術與資訊來分析與建議。
-- 回應的完整度： 評估我的技術程度（目前為網頁開發新手），並提供容易理解的解答與背景原因。
-- 互動式提示： 適時使用蘇格拉底式的提問與反思引導，幫助我釐清更深層次的需求與技術決策。
-- 個人化支援： 記住我們的對話脈絡與已達成的共識，提供連貫且個人化的支援。
-----------
-
-----------  
-# 專案背景與目標
-- 專案目的：以最簡易、快速的方式，開發一個現代化且功能完整的「廟宇網站」
-- 開發策略：採用 MVP（最小可行產品）優先的敏捷開發模式，追求「分階段可展示」的成果。
-- 專案名稱：BESshow （廟宇祈福網站）
-- 技術棧：Django、Python、PostgreSQL、Docker、WSL、VS code…等。
-- AI 輔助工具：GitHub Copilot（Gemini、ChatGPT、DeepSeek 或類似工具）
-- 主要目標： 開發一個名為 "besshow" 的廟宇網站，讓信眾可以線上點燈並完成付款，資料可以同步到由 API 串接的燈牆進行顯示與更新。
-
-- 專案基底：專案是基於 `https://github.com/wsvincent/lithium.git` 這個 Django 專案範本進行客製化開發。
-- 執行方針：
-	- 以 `wsvincent/lithium` 為基礎，為廟宇快速打造一個 MVP 網站。
-	- 以簡潔、穩定為核心想法，逐步完成網站功能，並設計可展示的階段功能。
-	- 設計切分階段，設計成可交由 AI 輔助執行的步驟，切分階段的重點原則：功能的相依性。請由基礎模組開始建置，以方便進行測試。
-	- 開發前，先檢查與修正開發環境，並完成開發環境說明文件。
-	- 開發環境需求如下：「# 技術與開發環境」與 「# 運維環境」所列建議
-	- 如果符合功能相依原則，先專注於核心功能「線上點燈」，讓信眾選擇燈種（背景或主動註冊）、並完成線上付款。
-
-# 技術與開發環境（下列版本使用最新或長期支援版本）：
-- 程式語言： Python
-- IDE： VS Code + WSL 擴充套件
-- Web framework: Django
-- DB: PostgreSQL 
-- OS: WSL 2 - Ubuntu 24.04 LTS (in Window 11 Pro)
-- 開發環境用 Docker 管理，並使用現代化的 docker compose V2 指令與語法。
-- 開發環境用 Docker，分二個 Docker
-	-- bes-web: Django
-	-- bes-db: PostgreSQL
-- 開發環境 Docker 架構備註：
-    1. 採用多容器分離架構，初期為 'bes-web' (Django) 和 'bes-db' (PostgreSQL)，後期為部署準備會加入 `nginx`。
-    2. 'docker-compose.yml' 檔案遵循最新的 **Compose Specification**，**不包含**頂層的 `version` 屬性。
-    3. docker 的 uv.lock 是用 pyproject.toml，如有需要再轉 requirements.txt
-- Python 套件管理： 在 WSL 環境中使用 uv。	
-- 環境變數管理：
-	- 基底專案建議整合並使用 `django-environ` 套件。
-    - 所有敏感資訊與環境相關設定都存放在 `.env` 檔案中，該檔案已被加入 `.gitignore`。
-
-# 運維環境：（可以等 MVP 完成再處理）
-- 上線部署使用 AWS 服務（AWS EC2、AWS RDS...等）
-- AWS 上的 Docker 容器職責分離：
-- docker-compose.yml 中，規劃三個服務容器：
-	- nginx: 作為反向代理（Reverse Proxy），處理靜態檔案、負載平衡，並將請求轉發給 Gunicorn。
-	- web: 運行 Gunicorn 跟 Django 應用。
-	- db: PostgreSQL 服務。
-- 備註：Docker 架構：
-    - 採用多容器分離架構，初期為 `web` (Django) 和 `db` (PostgreSQL)，後期為部署準備會加入 `nginx`。
-    - `docker-compose.yml` 檔案遵循最新的 **Compose Specification**，**不包含**頂層的 `version` 屬性。
----------- 
-
----------- 
-#	執行狀態更新 @2025.09.03
----------- 
-##	開發環境 WSL、Docker...等已經建置完成，後續將 Git 至 GitHub。
-##	2025.09.02 修改了 Django 原本的登入與註冊機制。
-	但此專案希望開發可以由廟宇人員操作的網頁以維護使用者資料。
-
-##	要先開發一個廟宇點燈的燈種資料維護功能。提供基本的 CRUD 功能。
-    已建立了一個 /products 的燈種維護功能，完成了最基本的功能展示。
-
-**使用者故事：** 
-作為使用者（善男：男性、信女：女性、善信：善男信女統稱或二元性別），
-我希望能夠於網站上完成線上點燈。流程如下:
-- 查詢並顯示可選擇之燈種（光明等、財神燈...等）
-- 完成燈種與數量選擇（購物車）
-- 結帳前完成善信輸入資料並檢核完善
-- 網站系統依其其登入帳號進行結帳
-- 如為廟方人員則選擇善信後代入其資料，再進行結帳
-- 依顯示的金額掃描 QR Code 進行付款。
-- 網站系統顯示結緣清單（訂單），並提供感謝狀（購買收據），格式可為 PDF。
-
-##  下列為開發相關需求：
-----------
-** 開發階段 090301
-    - 目標：建立燈種資料維護功能
-    - 進度：已完成最基本的 CRUD 功能
-----------
-** 開發階段 090302
-    - 目標：建立信眾個人資料維護功能
-    - 目的：提供信眾友善的介面，讓其能自行管理個人資料（如姓名、性別、生日、聯絡方式、地址等）， 而非僅依賴後台管理員操作。
-            系統管理員帳號的維護仍透過 Django Admin 進行。
-    - 進度：準備開始進行
-
-功能名稱： 信眾個人資料維護 
-使用者： 網站信眾 (已登入使用者) 
-功能簡述： 提供信眾自行檢視、編輯及更新其個人帳號資料的介面。
-功能說明：
-新增個人資料(Create)： 信眾在註冊時，可透過信箱、手機號碼、姓名等個人資料進行註冊。
-檢視個人資料 (Read)： 信眾登入後，可透過專屬頁面查看其在系統中儲存的個人資訊，包含姓名、電子郵件、手機號碼、性別、生日（國曆/農曆）、地址等。
-編輯個人資料 (Update)： 信眾可修改除帳號憑證（如電子郵件，此部分仍由 django-allauth 流程處理）外的其他個人資料，例如姓名、手機號碼、性別、生日、地址等。
-資料驗證： 確保使用者輸入的資料符合預期格式和業務邏輯。
-安全性考量： 敏感操作（如密碼變更）應導向 django-allauth 提供的安全流程。
-技術實作： 參考 products 應用程式的 CRUD 模式，建立獨立的視圖 (View)、表單 (Form) 和模板 (Template) 來處理 CustomUser 模型的資料。
-
-建議實作方式：
-點燈流程結帳前，建立一個表單，讓使用者輸入必要的個人資料（例如姓名、電子郵件、手機號碼、性別、生日等）。
-當使用者提交此表單時，我們將：
-檢查使用者是否已存在： 根據電子郵件或手機號碼判斷。
-如果不存在，則導入註冊頁面提供善信、信眾、使用者輸入編輯與完善個人資料。
-如果使用者已存在，則讓善信輸入密碼，登入該使用者。
-這樣可以確保每個點燈行為都與一個使用者帳號關聯，無論是新註冊的還是現有的。
-
-功能開發備註說明：
-
-- 使用者註冊資料包含姓名、性別、國曆生日、農曆生日、手機、eMail、地址...等
-	- 姓名：（必填）長度限制50
-	- 性別：（必填）列舉清單，男性稱為善男，女性稱為信女，預設為善信（表示性別未選擇或非二元性別者）
-	- 國曆生日：
-		- 年、月、日：（必填）以日曆與下列方式選擇
-		- 時、分：分別以下拉方式選擇，預設為空白
-	- 農曆生日：
-		- 年、月、日：以日曆與下列方式選擇
-		- 時辰：子、丑、寅、卯、辰、巳、午、未、申、酉、戌、亥，預設為吉時（未選擇）
-		- 網頁提供由國曆轉換為農曆的功能，如國曆的時、分未選擇，則代入吉時
-	- 手機：（必填）台灣手機號碼格式檢核（保留擴充格式：國際碼 + 手機號）
-	- eMail：格式檢查（未來擴充，可用 eMail 認證，或變更密碼...等）
-	- 地址：國內地址以下拉選單選擇加填寫詳細地址欄，國外地址直接填寫詳細地址欄
-
-**國曆轉農曆功能**
-   * 輸入國曆日期與時間 → 轉換農曆年月日 + 時辰地支。
-   * 無時間 → 預設吉時。
- 
-**前端互動**
-   * 農曆時辰：下拉選單（吉時 + 12 地支）。
-   * 國曆時間：小時與分鐘下拉輸入。
-   * 地址：使用 https://github.com/donma/TaiwanAddressCityAreaRoadChineseEnglishJSON 來動態生成縣市與鄉鎮區下拉選單並填入郵遞區號
-
-**身份驗證模型設計**：
-  **id**：Django 自動遞增整數，作為內部主鍵
-  **uuid**：CustomUser 模型中新增唯一欄位，作為 API 對外識別碼，避免 id 被猜測或枚舉。
-  **email / phone_number**：作為登入憑證，非主鍵
-  **登入邏輯**：判斷輸入為 email 或 phone_number，再執行登入。
-   
-# 使用者身份驗證模型：
-架構原則： 嚴格分離**「內部識別碼」、「公開識別碼」與「登入憑證」**三者的角色。
-- 內部主要識別碼 (id)：
-	沿用 Django 為 CustomUser 模型提供的自動遞增整數 id 作為系統內部唯一的、不可變的主鍵。所有內部資料庫的關聯都基於此 id。
-- 外部公開識別碼 (uuid)：
-	在 CustomUser 模型中新增一個非主鍵的、唯一的 uuid 欄位。
-	此 uuid 將作為未來 API 路由中暴露給外部的唯一識別碼 (例如 /api/users/<uuid>/)，以增強安全性，避免使用者 ID 被猜測或枚舉。
-- 登入憑證 (email, phone_number)：
-	email (來自 lithium 專案預設) 和我們將新增的 phone_number 欄位，其角色純粹是「登入憑證」，它們不是使用者在系統中的主要識別碼。
-
-----------   
-** 開發階段 090303
-	- 目標：建立使用者點燈流程（選擇燈種、數量進購物車，並結賬）
-    - 功能說明：
-        1. 列出所有燈種，提供燈種的種類與價格。
-        2. 以燈種清單提供選擇，選擇或加入後可修改（包含數量），提供 祈福(結緣)清單維護 即類似商品購物車功能。
-        3. 購物車結帳：
-            a. 流程功能重點：結帳前，檢查善信（使用者）是否登入
-            - 已登入：開啓 詳細會員資料頁面 ，顯示善信個人資料，讓善信編輯、修改與確認存檔。
-            - 未登入：開啓 帳號登入（帳號建立）頁面。
-                依選擇，如進行登入，依輸入的 email 或 電話進行比對登入。登入後顯示善信個人資料，讓善信編輯、修改與確認存檔。
-                如選擇帳號建立，顯示帳號建立頁面，讓善信輸入與編輯個人資料，完成後確認存檔。
-            a. 流程功能頁面由 **開發階段 090302** 實作，此處使用參數（如：uuid）連結操作。
-            - 善信（會員）資料完善後代入至結帳功能流程
-                - 顯示購物車清單
-                - 顯示結帳金額
-        4. 依顯示的金額掃描 QR Code 進行付款。 **功能建立階段先提供顯示 QR Code 圖片**
-        5. 網站系統顯示 祈福(結緣)清單（訂單），並提供感謝狀（購買收據），格式可為 PDF。
-        5.  BONUS: 考慮加入使用者的個人資料管理功能
-    - 進度：
-----------
\ No newline at end of file
diff --git a/REQ-005.1.txt b/REQ-005.1.txt
deleted file mode 100644
index 4204bb9..0000000
--- a/REQ-005.1.txt
+++ /dev/null
@@ -1,183 +0,0 @@
-----------
-# AI 角色設定
-你是一位嚴謹且專業的資深 Django 全端開發工程師，也是一位負責、耐心、善於指導程式新手的技術導師。
-你的核心任務是為一位剛入門的開發者，提供一份從零到一建立廟宇網站 MVP (Minimum Viable Product) 的超詳細、分階段執行計畫。
-並依計劃逐步完成一個 MVP，並提供可呈現的階段功能。
-請注意：
-你的所有解釋都必須清晰易懂，專業的術語會有詳細的解說，並在每一個關鍵步驟提供完整的程式碼範例和終端機操作指令。
-且遵循以下互動特點：
-- 使用語言：溝通內容使用正體中文，技術、縮寫或專有名稱使用中英對照。
-- 支架式引導回應： 回應會採用清晰的架構，歸納資訊並說明各主題間的關聯。
-- 技術資訊即時性： 在穩定簡單的原則下，儘量使用最新技術與資訊來分析與建議。
-- 回應的完整度： 評估我的技術程度（目前為網頁開發新手），並提供容易理解的解答與背景原因。
-- 互動式提示： 適時使用蘇格拉底式的提問與反思引導，幫助我釐清更深層次的需求與技術決策。
-- 個人化支援： 記住我們的對話脈絡與已達成的共識，提供連貫且個人化的支援。
-----------
-
-----------  
-# 專案背景與目標
-- 專案目的：以最簡易、快速的方式，開發一個現代化且功能完整的「廟宇網站」
-- 開發策略：採用 MVP（最小可行產品）優先的敏捷開發模式，追求「分階段可展示」的成果。
-- 專案名稱：BESshow （廟宇祈福網站）
-- 技術棧：Django、Python、PostgreSQL、Docker、WSL、VS code…等。
-- AI 輔助工具：GitHub Copilot（Gemini、ChatGPT、DeepSeek 或類似工具）
-- 主要目標： 開發一個名為 "besshow" 的廟宇網站，讓信眾可以線上點燈並完成付款，資料可以同步到由 API 串接的燈牆進行顯示與更新。
-
-- 專案基底：專案是基於 `https://github.com/wsvincent/lithium.git` 這個 Django 專案範本進行客製化開發。
-- 執行方針：
-	- 以 `wsvincent/lithium` 為基礎，為廟宇快速打造一個 MVP 網站。
-	- 以簡潔、穩定為核心想法，逐步完成網站功能，並設計可展示的階段功能。
-	- 設計切分階段，設計成可交由 AI 輔助執行的步驟，切分階段的重點原則：功能的相依性。請由基礎模組開始建置，以方便進行測試。
-	- 開發前，先檢查與修正開發環境，並完成開發環境說明文件。
-	- 開發環境需求如下：「# 技術與開發環境」與 「# 運維環境」所列建議
-	- 如果符合功能相依原則，先專注於核心功能「線上點燈」，讓信眾選擇燈種（背景或主動註冊）、並完成線上付款。
-
-# 技術與開發環境（下列版本使用最新或長期支援版本）：
-- 程式語言： Python
-- IDE： VS Code + WSL 擴充套件
-- Web framework: Django
-- DB: PostgreSQL 
-- OS: WSL 2 - Ubuntu 24.04 LTS (in Window 11 Pro)
-- 開發環境用 Docker 管理，並使用現代化的 docker compose V2 指令與語法。
-- 開發環境用 Docker，分二個 Docker
-	-- bes-web: Django
-	-- bes-db: PostgreSQL
-- 開發環境 Docker 架構備註：
-    1. 採用多容器分離架構，初期為 'bes-web' (Django) 和 'bes-db' (PostgreSQL)，後期為部署準備會加入 `nginx`。
-    2. 'docker-compose.yml' 檔案遵循最新的 **Compose Specification**，**不包含**頂層的 `version` 屬性。
-    3. docker 的 uv.lock 是用 pyproject.toml，如有需要再轉 requirements.txt
-- Python 套件管理： 在 WSL 環境中使用 uv。	
-- 環境變數管理：
-	- 基底專案建議整合並使用 `django-environ` 套件。
-    - 所有敏感資訊與環境相關設定都存放在 `.env` 檔案中，該檔案已被加入 `.gitignore`。
-
-# 運維環境：（可以等 MVP 完成再處理）
-- 上線部署使用 AWS 服務（AWS EC2、AWS RDS...等）
-- AWS 上的 Docker 容器職責分離：
-- docker-compose.yml 中，規劃三個服務容器：
-	- nginx: 作為反向代理（Reverse Proxy），處理靜態檔案、負載平衡，並將請求轉發給 Gunicorn。
-	- web: 運行 Gunicorn 跟 Django 應用。
-	- db: PostgreSQL 服務。
-- 備註：Docker 架構：
-    - 採用多容器分離架構，初期為 `web` (Django) 和 `db` (PostgreSQL)，後期為部署準備會加入 `nginx`。
-    - `docker-compose.yml` 檔案遵循最新的 **Compose Specification**，**不包含**頂層的 `version` 屬性。
----------- 
-
-**使用者故事：** 
-作為使用者（善男：男性、信女：女性、善信：善男信女統稱或二元性別），
-我希望能夠於網站上完成線上點燈。流程如下:
-- 查詢並顯示可選擇之燈種（光明等、財神燈...等）
-- 完成燈種與數量選擇（購物車）
-- 結帳前完成善信輸入資料並檢核完善
-- 網站系統依其其登入帳號進行結帳
-- 如為廟方人員則選擇善信後代入其資料，再進行結帳
-- 依顯示的金額掃描 QR Code 進行付款。
-- 網站系統顯示結緣清單（訂單），並提供感謝狀（購買收據），格式可為 PDF。
-
----------- 
-#	執行狀態更新 @2025.09.03
----------- 
-##  備註
-##	開發環境 WSL、Docker...等已經建置完成，後續將 Git 至 GitHub。
-##	2025.09.02 修改了 Django 原本的登入與註冊機制。
-	但此專案希望開發可以由廟宇人員操作的網頁以維護使用者資料。
-
-##  下列為開發相關需求：
-----------
-** 開發階段 090301
-    - 目標：建立燈種資料維護功能
-    - 目的：開發一個廟宇點燈的燈種資料維護功能。提供基本的 CRUD 功能
-    - 進度：已完成最基本的 CRUD 功能
-    - 完成：已建立了一個 /products 的燈種維護功能，完成了最基本的功能展示。
-----------
-** 開發階段 090302
-    - 目標：建立信眾個人資料維護功能
-    - 目的：提供信眾友善的介面，讓其能自行管理個人資料（如姓名、性別、生日、聯絡方式、地址等）， 而非僅依賴後台管理員操作。
-            系統管理員帳號的維護仍透過 Django Admin 進行。
-    - 進度：進行中
-    - 完成：已可以單純的使用者建立、儲存，並可以於儲存是將國曆轉換成農曆。
-    - 接續：進行先前完成功能的測試，完成後將網頁做簡單的UI美化。
-----------
-
-
-功能名稱： 信眾個人資料維護 
-使用者： 網站信眾 (已登入使用者) 
-功能簡述： 提供信眾自行檢視、編輯及更新其個人帳號資料的介面。
-功能說明：
-新增個人資料(Create)： 信眾在註冊時，可透過信箱、手機號碼、姓名等個人資料進行註冊。
-檢視個人資料 (Read)： 信眾登入後，可透過專屬頁面查看其在系統中儲存的個人資訊，包含姓名、電子郵件、手機號碼、性別、生日（國曆/農曆）、地址等。
-編輯個人資料 (Update)： 信眾可修改除帳號憑證（如電子郵件，此部分仍由 django-allauth 流程處理）外的其他個人資料，例如姓名、手機號碼、性別、生日、地址等。
-資料驗證： 確保使用者輸入的資料符合預期格式和業務邏輯。
-安全性考量： 敏感操作（如密碼變更）應導向 django-allauth 提供的安全流程。
-技術實作： 參考 products 應用程式的 CRUD 模式，建立獨立的視圖 (View)、表單 (Form) 和模板 (Template) 來處理 CustomUser 模型的資料。
-
-建議實作方式：
-點燈流程結帳前，建立一個表單，讓使用者輸入必要的個人資料（例如姓名、電子郵件、手機號碼、性別、生日等）。
-當使用者提交此表單時，我們將：
-檢查使用者是否已存在： 根據電子郵件或手機號碼判斷。
-如果不存在，則導入註冊頁面提供善信、信眾、使用者輸入編輯與完善個人資料。
-如果使用者已存在，則讓善信輸入密碼，登入該使用者。
-這樣可以確保每個點燈行為都與一個使用者帳號關聯，無論是新註冊的還是現有的。
-
-功能開發備註說明：
-
-- 使用者註冊資料包含姓名、性別、國曆生日、農曆生日、手機、eMail、地址...等
-	- 姓名：（必填）長度限制50
-	- 性別：（必填）列舉清單，男性稱為善男，女性稱為信女，預設為善信（表示性別未選擇或非二元性別者）
-	- 國曆生日：
-		- 年、月、日：（必填）以日曆與下列方式選擇
-		- 時、分：分別以下拉方式選擇，預設為空白
-	- 農曆生日：
-		- 年、月、日：以日曆與下列方式選擇
-		- 時辰：子、丑、寅、卯、辰、巳、午、未、申、酉、戌、亥，預設為吉時（未選擇）
-		- 網頁提供由國曆轉換為農曆的功能，如國曆的時、分未選擇，則代入吉時
-	- 手機：（必填）台灣手機號碼格式檢核（保留擴充格式：國際碼 + 手機號）
-	- eMail：格式檢查（未來擴充，可用 eMail 認證，或變更密碼...等）
-	- 地址：國內地址以下拉選單選擇加填寫詳細地址欄，國外地址直接填寫詳細地址欄
-
-**國曆轉農曆功能**
-   * 輸入國曆日期與時間 → 轉換農曆年月日 + 時辰地支。
-   * 無時間 → 預設吉時。
- 
-**前端互動**
-   * 農曆時辰：下拉選單（吉時 + 12 地支）。
-   * 國曆時間：小時與分鐘下拉輸入。
-   * 地址：使用 https://github.com/donma/TaiwanAddressCityAreaRoadChineseEnglishJSON 來動態生成縣市與鄉鎮區下拉選單並填入郵遞區號
-
-**身份驗證模型設計**：
-  **id**：Django 自動遞增整數，作為內部主鍵
-  **uuid**：CustomUser 模型中新增唯一欄位，作為 API 對外識別碼，避免 id 被猜測或枚舉。
-  **email / phone_number**：作為登入憑證，非主鍵
-  **登入邏輯**：判斷輸入為 email 或 phone_number，再執行登入。
-   
-# 使用者身份驗證模型：
-架構原則： 嚴格分離**「內部識別碼」、「公開識別碼」與「登入憑證」**三者的角色。
-- 內部主要識別碼 (id)：
-	沿用 Django 為 CustomUser 模型提供的自動遞增整數 id 作為系統內部唯一的、不可變的主鍵。所有內部資料庫的關聯都基於此 id。
-- 外部公開識別碼 (uuid)：
-	在 CustomUser 模型中新增一個非主鍵的、唯一的 uuid 欄位。
-	此 uuid 將作為未來 API 路由中暴露給外部的唯一識別碼 (例如 /api/users/<uuid>/)，以增強安全性，避免使用者 ID 被猜測或枚舉。
-- 登入憑證 (email, phone_number)：
-	email (來自 lithium 專案預設) 和我們將新增的 phone_number 欄位，其角色純粹是「登入憑證」，它們不是使用者在系統中的主要識別碼。
-
-----------   
-** 開發階段 090303
-	- 目標：建立使用者點燈流程（選擇燈種、數量進購物車，並結賬）
-    - 功能說明：
-        1. 列出所有燈種，提供燈種的種類與價格。
-        2. 以燈種清單提供選擇，選擇或加入後可修改（包含數量），提供 祈福(結緣)清單維護 即類似商品購物車功能。
-        3. 購物車結帳：
-            a. 流程功能重點：結帳前，檢查善信（使用者）是否登入
-            - 已登入：開啓 詳細會員資料頁面 ，顯示善信個人資料，讓善信編輯、修改與確認存檔。
-            - 未登入：開啓 帳號登入（帳號建立）頁面。
-                依選擇，如進行登入，依輸入的 email 或 電話進行比對登入。登入後顯示善信個人資料，讓善信編輯、修改與確認存檔。
-                如選擇帳號建立，顯示帳號建立頁面，讓善信輸入與編輯個人資料，完成後確認存檔。
-            a. 流程功能頁面由 **開發階段 090302** 實作，此處使用參數（如：uuid）連結操作。
-            - 善信（會員）資料完善後代入至結帳功能流程
-                - 顯示購物車清單
-                - 顯示結帳金額
-        4. 依顯示的金額掃描 QR Code 進行付款。 **功能建立階段先提供顯示 QR Code 圖片**
-        5. 網站系統顯示 祈福(結緣)清單（訂單），並提供感謝狀（購買收據），格式可為 PDF。
-        5.  BONUS: 考慮加入使用者的個人資料管理功能
-    - 進度：
-----------
\ No newline at end of file
diff --git a/REQ-005.2-OK.txt b/REQ-005.2-OK.txt
deleted file mode 100644
index ddc2b87..0000000
--- a/REQ-005.2-OK.txt
+++ /dev/null
@@ -1,224 +0,0 @@
-----------
-# AI 角色設定
-你是一位嚴謹且專業的資深 Django 全端開發工程師，也是一位負責、耐心、善於指導程式新手的技術導師。
-你的核心任務是為一位剛入門的開發者，提供一份從零到一建立廟宇網站 MVP (Minimum Viable Product) 的超詳細、分階段執行計畫。
-並依計劃逐步完成一個 MVP，並提供可呈現的階段功能。
-請注意：
-你的所有解釋都必須清晰易懂，專業的術語會有詳細的解說，並在每一個關鍵步驟提供完整的程式碼範例和終端機操作指令。
-且遵循以下互動特點：
-- 使用語言：溝通內容使用正體中文，技術、縮寫或專有名稱使用中英對照。
-- 支架式引導回應： 回應會採用清晰的架構，歸納資訊並說明各主題間的關聯。
-- 技術資訊即時性： 在穩定簡單的原則下，儘量使用最新技術與資訊來分析與建議。
-- 回應的完整度： 評估我的技術程度（目前為網頁開發新手），並提供容易理解的解答與背景原因。
-- 互動式提示： 適時使用蘇格拉底式的提問與反思引導，幫助我釐清更深層次的需求與技術決策。
-- 個人化支援： 記住我們的對話脈絡與已達成的共識，提供連貫且個人化的支援。
-----------
-
-----------  
-# 專案背景與目標
-- 專案目的：以最簡易、快速的方式，開發一個現代化且功能完整的「廟宇網站」
-- 開發策略：採用 MVP（最小可行產品）優先的敏捷開發模式，追求「分階段可展示」的成果。
-- 專案名稱：BESshow （廟宇祈福網站）
-- 技術棧：Django、Python、PostgreSQL、Docker、WSL、VS code…等。
-- AI 輔助工具：GitHub Copilot（Gemini、ChatGPT、DeepSeek 或類似工具）
-- 主要目標： 開發一個名為 "besshow" 的廟宇網站，讓信眾可以線上點燈並完成付款，資料可以同步到由 API 串接的燈牆進行顯示與更新。
-
-- 專案基底：專案是基於 `https://github.com/wsvincent/lithium.git` 這個 Django 專案範本進行客製化開發。
-- 執行方針：
-	- 以 `wsvincent/lithium` 為基礎，為廟宇快速打造一個 MVP 網站。
-	- 以簡潔、穩定為核心想法，逐步完成網站功能，並設計可展示的階段功能。
-	- 設計切分階段，設計成可交由 AI 輔助執行的步驟，切分階段的重點原則：功能的相依性。請由基礎模組開始建置，以方便進行測試。
-	- 開發前，先檢查與修正開發環境，並完成開發環境說明文件。
-	- 開發環境需求如下：「# 技術與開發環境」與 「# 運維環境」所列建議
-	- 如果符合功能相依原則，先專注於核心功能「線上點燈」，讓信眾選擇燈種（背景或主動註冊）、並完成線上付款。
-
-# 技術與開發環境（下列版本使用最新或長期支援版本）：
-- 程式語言： Python
-- IDE： VS Code + WSL 擴充套件
-- Web framework: Django
-- DB: PostgreSQL 
-- OS: WSL 2 - Ubuntu 24.04 LTS (in Window 11 Pro)
-- 開發環境用 Docker 管理，並使用現代化的 docker compose V2 指令與語法。
-- 開發環境用 Docker，分二個 Docker
-	-- bes-web: Django
-	-- bes-db: PostgreSQL
-- 開發環境 Docker 架構備註：
-    1. 採用多容器分離架構，初期為 'bes-web' (Django) 和 'bes-db' (PostgreSQL)，後期為部署準備會加入 `nginx`。
-    2. 'docker-compose.yml' 檔案遵循最新的 **Compose Specification**，**不包含**頂層的 `version` 屬性。
-    3. docker 的 uv.lock 是用 pyproject.toml，如有需要再轉 requirements.txt
-- Python 套件管理： 在 WSL 環境中使用 uv。	
-- 環境變數管理：
-	- 基底專案建議整合並使用 `django-environ` 套件。
-    - 所有敏感資訊與環境相關設定都存放在 `.env` 檔案中，該檔案已被加入 `.gitignore`。
-
-# 運維環境：（可以等 MVP 完成再處理）
-- 上線部署使用 AWS 服務（AWS EC2、AWS RDS...等）
-- AWS 上的 Docker 容器職責分離：
-- docker-compose.yml 中，規劃三個服務容器：
-	- nginx: 作為反向代理（Reverse Proxy），處理靜態檔案、負載平衡，並將請求轉發給 Gunicorn。
-	- web: 運行 Gunicorn 跟 Django 應用。
-	- db: PostgreSQL 服務。
-- 備註：Docker 架構：
-    - 採用多容器分離架構，初期為 `web` (Django) 和 `db` (PostgreSQL)，後期為部署準備會加入 `nginx`。
-    - `docker-compose.yml` 檔案遵循最新的 **Compose Specification**，**不包含**頂層的 `version` 屬性。
----------- 
-
-**使用者故事：** 
-作為使用者（善男：男性、信女：女性、善信：善男信女統稱或二元性別），
-我希望能夠於網站上完成線上點燈。流程如下:
-- 查詢並顯示可選擇之燈種（光明等、財神燈...等）
-- 完成燈種與數量選擇（購物車）
-- 結帳前完成善信輸入資料並檢核完善
-- 網站系統依其其登入帳號進行結帳
-- 如為廟方人員則選擇善信後代入其資料，再進行結帳
-- 依顯示的金額掃描 QR Code 進行付款。
-- 網站系統顯示結緣清單（訂單），並提供感謝狀（購買收據），格式可為 PDF。
-
----------- 
-#	執行狀態更新 @2025.09.03
----------- 
-##  備註
-##	開發環境 WSL、Docker...等已經建置完成，後續將 Git 至 GitHub。
-##	2025.09.02 修改了 Django 原本的登入與註冊機制。
-	但此專案希望開發可以由廟宇人員操作的網頁以維護使用者資料。
-
-##  下列為開發相關需求：
-----------
-** 開發階段 090301
-    - 目標：建立燈種資料維護功能
-    - 目的：開發一個廟宇點燈的燈種資料維護功能。提供基本的 CRUD 功能
-    - 進度：已完成最基本的 CRUD 功能
-    - 完成：已建立了一個 /products 的燈種維護功能，完成了最基本的功能展示。
-----------
-** 開發階段 090302
-    - 目標：建立信眾個人資料維護功能
-    - 目的：提供信眾友善的介面，讓其能自行管理個人資料（如姓名、性別、生日、聯絡方式、地址等）， 而非僅依賴後台管理員操作。
-            系統管理員帳號的維護仍透過 Django Admin 進行。
-    - 進度：暫停
-    - 完成：已可以單純的使用者建立、儲存，並可以於儲存是將國曆轉換成農曆。
-    - 待完成項目：地址的縣市、鄉鎮市區使用下拉選取。
-----------
-功能名稱： 信眾個人資料維護 
-使用者： 網站信眾 (已登入使用者) 
-功能簡述： 提供信眾自行檢視、編輯及更新其個人帳號資料的介面。
-功能說明：
-新增個人資料(Create)： 信眾在註冊時，可透過信箱、手機號碼、姓名等個人資料進行註冊。
-檢視個人資料 (Read)： 信眾登入後，可透過專屬頁面查看其在系統中儲存的個人資訊，包含姓名、電子郵件、手機號碼、性別、生日（國曆/農曆）、地址等。
-編輯個人資料 (Update)： 信眾可修改除帳號憑證（如電子郵件，此部分仍由 django-allauth 流程處理）外的其他個人資料，例如姓名、手機號碼、性別、生日、地址等。
-資料驗證： 確保使用者輸入的資料符合預期格式和業務邏輯。
-安全性考量： 敏感操作（如密碼變更）應導向 django-allauth 提供的安全流程。
-技術實作： 參考 products 應用程式的 CRUD 模式，建立獨立的視圖 (View)、表單 (Form) 和模板 (Template) 來處理 CustomUser 模型的資料。
-
-建議實作方式：
-點燈流程結帳前，建立一個表單，讓使用者輸入必要的個人資料（例如姓名、電子郵件、手機號碼、性別、生日等）。
-當使用者提交此表單時，我們將：
-檢查使用者是否已存在： 根據電子郵件或手機號碼判斷。
-如果不存在，則導入註冊頁面提供善信、信眾、使用者輸入編輯與完善個人資料。
-如果使用者已存在，則讓善信輸入密碼，登入該使用者。
-這樣可以確保每個點燈行為都與一個使用者帳號關聯，無論是新註冊的還是現有的。
-
-功能開發備註說明：
-
-- 使用者註冊資料包含姓名、性別、國曆生日、農曆生日、手機、eMail、地址...等
-	- 姓名：（必填）長度限制50
-	- 性別：（必填）列舉清單，男性稱為善男，女性稱為信女，預設為善信（表示性別未選擇或非二元性別者）
-	- 國曆生日：
-		- 年、月、日：（必填）以日曆與下列方式選擇
-		- 時、分：分別以下拉方式選擇，預設為空白
-	- 農曆生日：
-		- 年、月、日：以日曆與下列方式選擇
-		- 時辰：子、丑、寅、卯、辰、巳、午、未、申、酉、戌、亥，預設為吉時（未選擇）
-		- 網頁提供由國曆轉換為農曆的功能，如國曆的時、分未選擇，則代入吉時
-	- 手機：（必填）台灣手機號碼格式檢核（保留擴充格式：國際碼 + 手機號）
-	- eMail：格式檢查（未來擴充，可用 eMail 認證，或變更密碼...等）
-	- 地址：國內地址以下拉選單選擇加填寫詳細地址欄，國外地址直接填寫詳細地址欄
-
-**國曆轉農曆功能**
-   * 輸入國曆日期與時間 → 轉換農曆年月日 + 時辰地支。
-   * 無時間 → 預設吉時。
- 
-**前端互動**
-   * 農曆時辰：下拉選單（吉時 + 12 地支）。
-   * 國曆時間：小時與分鐘下拉輸入。
-   * 地址：使用 https://github.com/donma/TaiwanAddressCityAreaRoadChineseEnglishJSON 來動態生成縣市與鄉鎮區下拉選單並填入郵遞區號
-
-**身份驗證模型設計**：
-  **id**：Django 自動遞增整數，作為內部主鍵
-  **uuid**：CustomUser 模型中新增唯一欄位，作為 API 對外識別碼，避免 id 被猜測或枚舉。
-  **email / phone_number**：作為登入憑證，非主鍵
-  **登入邏輯**：判斷輸入為 email 或 phone_number，再執行登入。
-   
-# 使用者身份驗證模型：
-架構原則： 嚴格分離**「內部識別碼」、「公開識別碼」與「登入憑證」**三者的角色。
-- 內部主要識別碼 (id)：
-	沿用 Django 為 CustomUser 模型提供的自動遞增整數 id 作為系統內部唯一的、不可變的主鍵。所有內部資料庫的關聯都基於此 id。
-- 外部公開識別碼 (uuid)：
-	在 CustomUser 模型中新增一個非主鍵的、唯一的 uuid 欄位。
-	此 uuid 將作為未來 API 路由中暴露給外部的唯一識別碼 (例如 /api/users/<uuid>/)，以增強安全性，避免使用者 ID 被猜測或枚舉。
-- 登入憑證 (email, phone_number)：
-	email (來自 lithium 專案預設) 和我們將新增的 phone_number 欄位，其角色純粹是「登入憑證」，它們不是使用者在系統中的主要識別碼。
-
-----------   
-** 開發階段 090303
-	- 目標：建立使用者點燈流程（選擇燈種、數量進購物車，並結賬）
-    - 功能說明：
-        1. 列出所有燈種，提供燈種的種類與價格。
-        2. 以燈種清單提供選擇，選擇或加入後可修改（包含數量），提供 祈福(結緣)清單維護 即類似商品購物車功能。
-        3. 購物車結帳：
-            a. 流程功能重點：結帳前，檢查善信（使用者）是否登入
-            - 已登入：開啓 詳細會員資料頁面 ，顯示善信個人資料，讓善信編輯、修改與確認存檔。
-            - 未登入：開啓 帳號登入（帳號建立）頁面。
-                依選擇，如進行登入，依輸入的 email 或 電話進行比對登入。登入後顯示善信個人資料，讓善信編輯、修改與確認存檔。
-                如選擇帳號建立，顯示帳號建立頁面，讓善信輸入與編輯個人資料，完成後確認存檔。
-            a. 流程功能頁面由 **開發階段 090302** 實作，此處使用參數（如：uuid）連結操作。
-            - 善信（會員）資料完善後代入至結帳功能流程
-                - 顯示購物車清單
-                - 顯示結帳金額
-        4. 依顯示的金額掃描 QR Code 進行付款。 **功能建立階段先提供顯示 QR Code 圖片**
-        5. 網站系統顯示 祈福(結緣)清單（訂單），並提供感謝狀（購買收據），格式可為 PDF。
-        5.  BONUS: 考慮加入使用者的個人資料管理功能
-    - 進度：
-----------
-
----------- 
-@ 2025.09.04 新增帳號清單（維護）
-
-在 accounts 應用中新增一個「帳號列表維護」功能，用來列出除了超級使用者之外的所有帳號。這將是一個自訂的 ListView。
-
-我的計畫如下：
-
-建立新的 View (視圖)：
-
-在 accounts/views.py 中，我會建立一個新的 ListView，例如命名為 AccountListView。
-這個視圖將查詢 CustomUser 物件，並篩選掉超級使用者 (is_superuser=False)。
-它會指定一個模板名稱（例如 account/account_list.html）和上下文物件名稱（例如 accounts）。
-建立新的 Template (模板)：
-
-我會創建 accounts/templates/account/account_list.html。
-這個模板將以表格形式顯示帳號列表，類似於我們之前美化過的 product_list.html。
-表格中會包含相關的使用者資訊（例如使用者名稱、電子郵件、姓名、手機號碼、性別等）。
-目前只會列出帳號，暫不提供編輯/刪除連結，除非您後續有需求。
-新增 URL Pattern (URL 模式)：
-
-在 accounts/urls.py 中，我會為 AccountListView 新增一個 URL 模式（例如 accounts/list/）。
-新增導覽列連結 (可選，但提升使用者體驗)：
-
-在 templates/_base.html 中，我會為這個新頁面新增一個連結，並限制只有工作人員/超級使用者才能看到。
----------- 
-好的，我已經創建了 accounts/templates/account/account_form.html 模板檔案。
-
-至此，為「帳號列表維護」頁面新增「修改」功能的所有步驟都已完成：
-
-在 accounts/forms.py 中建立了 AccountUpdateForm。
-在 accounts/views.py 中建立了 AccountUpdateView。
-在 accounts/urls.py 中新增了 AccountUpdateView 的 URL 模式。
-修改了 accounts/templates/account/account_list.html，為每個帳號新增了「編輯」連結。
-創建了 accounts/templates/account/account_form.html 作為帳號編輯表單的模板。
-現在，請您登入為工作人員，然後重新整理瀏覽器。
-
-訪問「帳號列表」頁面 (/my-account/list/)。
-點擊任何一個非超級使用者帳號旁的「編輯」按鈕。
-驗證表單是否正確載入。
-嘗試修改一些欄位，包括「是否啟用」(is_active)，然後儲存。
-確認修改是否反映在帳號列表中。
----------- 
\ No newline at end of file
diff --git a/REQ-005.2.txt b/REQ-005.2.txt
deleted file mode 100644
index 7f6e952..0000000
--- a/REQ-005.2.txt
+++ /dev/null
@@ -1,181 +0,0 @@
-----------
-# AI 角色設定
-你是一位嚴謹且專業的資深 Django 全端開發工程師，也是一位負責、耐心、善於指導程式新手的技術導師。
-你的核心任務是為一位剛入門的開發者，提供一份從零到一建立廟宇網站 MVP (Minimum Viable Product) 的超詳細、分階段執行計畫。
-並依計劃逐步完成一個 MVP，並提供可呈現的階段功能。
-請注意：
-你的所有解釋都必須清晰易懂，專業的術語會有詳細的解說，並在每一個關鍵步驟提供完整的程式碼範例和終端機操作指令。
-且遵循以下互動特點：
-- 使用語言：溝通內容使用正體中文，技術、縮寫或專有名稱使用中英對照。
-- 支架式引導回應： 回應會採用清晰的架構，歸納資訊並說明各主題間的關聯。
-- 技術資訊即時性： 在穩定簡單的原則下，儘量使用最新技術與資訊來分析與建議。
-- 回應的完整度： 評估我的技術程度（目前為網頁開發新手），並提供容易理解的解答與背景原因。
-- 互動式提示： 適時使用蘇格拉底式的提問與反思引導，幫助我釐清更深層次的需求與技術決策。
-- 個人化支援： 記住我們的對話脈絡與已達成的共識，提供連貫且個人化的支援。
-----------
-
-----------  
-# 專案背景與目標
-- 專案目的：以最簡易、快速的方式，開發一個現代化且功能完整的「廟宇網站」
-- 開發策略：採用 MVP（最小可行產品）優先的敏捷開發模式，追求「分階段可展示」的成果。
-- 專案名稱：BESshow （廟宇祈福網站）
-- 技術棧：Django、Python、PostgreSQL、Docker、WSL、VS code…等。
-- AI 輔助工具：GitHub Copilot（Gemini、ChatGPT、DeepSeek 或類似工具）
-- 主要目標： 開發一個名為 "besshow" 的廟宇網站，讓信眾可以線上點燈並完成付款，資料可以同步到由 API 串接的燈牆進行顯示與更新。
-
-- 專案基底：專案是基於 `https://github.com/wsvincent/lithium.git` 這個 Django 專案範本進行客製化開發。
-- 執行方針：
-	- 以 `wsvincent/lithium` 為基礎，為廟宇快速打造一個 MVP 網站。
-	- 以簡潔、穩定為核心想法，逐步完成網站功能，並設計可展示的階段功能。
-	- 設計切分階段，設計成可交由 AI 輔助執行的步驟，切分階段的重點原則：功能的相依性。請由基礎模組開始建置，以方便進行測試。
-	- 開發前，先檢查與修正開發環境，並完成開發環境說明文件。
-	- 開發環境需求如下：「# 技術與開發環境」與 「# 運維環境」所列建議
-	- 如果符合功能相依原則，先專注於核心功能「線上點燈」，讓信眾選擇燈種（背景或主動註冊）、並完成線上付款。
-
-# 技術與開發環境（下列版本使用最新或長期支援版本）：
-- 程式語言： Python
-- IDE： VS Code + WSL 擴充套件
-- Web framework: Django
-- DB: PostgreSQL 
-- OS: WSL 2 - Ubuntu 24.04 LTS (in Window 11 Pro)
-- 開發環境用 Docker 管理，並使用現代化的 docker compose V2 指令與語法。
-- 開發環境用 Docker，分二個 Docker
-	-- bes-web: Django
-	-- bes-db: PostgreSQL
-- 開發環境 Docker 架構備註：
-    1. 採用多容器分離架構，初期為 'bes-web' (Django) 和 'bes-db' (PostgreSQL)，後期為部署準備會加入 `nginx`。
-    2. 'docker-compose.yml' 檔案遵循最新的 **Compose Specification**，**不包含**頂層的 `version` 屬性。
-    3. docker 的 uv.lock 是用 pyproject.toml，如有需要再轉 requirements.txt
-- Python 套件管理： 在 WSL 環境中使用 uv。	
-- 環境變數管理：
-	- 基底專案建議整合並使用 `django-environ` 套件。
-    - 所有敏感資訊與環境相關設定都存放在 `.env` 檔案中，該檔案已被加入 `.gitignore`。
-
-# 運維環境：（可以等 MVP 完成再處理）
-- 上線部署使用 AWS 服務（AWS EC2、AWS RDS...等）
-- AWS 上的 Docker 容器職責分離：
-- docker-compose.yml 中，規劃三個服務容器：
-	- nginx: 作為反向代理（Reverse Proxy），處理靜態檔案、負載平衡，並將請求轉發給 Gunicorn。
-	- web: 運行 Gunicorn 跟 Django 應用。
-	- db: PostgreSQL 服務。
-- 備註：Docker 架構：
-    - 採用多容器分離架構，初期為 `web` (Django) 和 `db` (PostgreSQL)，後期為部署準備會加入 `nginx`。
-    - `docker-compose.yml` 檔案遵循最新的 **Compose Specification**，**不包含**頂層的 `version` 屬性。
----------- 
-
-**使用者故事：** 
-作為使用者（善男：男性、信女：女性、善信：善男信女統稱或二元性別），
-我希望能夠於網站上完成線上點燈。流程如下:
-- 查詢並顯示可選擇之燈種（光明等、財神燈...等）
-- 完成燈種與數量選擇（購物車）
-- 結帳前完成善信輸入資料並檢核完善
-- 網站系統依其其登入帳號進行結帳
-- 如為廟方人員則選擇善信後代入其資料，再進行結帳
-- 依顯示的金額掃描 QR Code 進行付款。
-- 網站系統顯示結緣清單（訂單），並提供感謝狀（購買收據），格式可為 PDF。
-
----------- 
-#	執行狀態更新 @2025.09.03
----------- 
-##  備註
-##	開發環境 WSL、Docker...等已經建置完成，後續將 Git 至 GitHub。
-##	2025.09.02 修改了 Django 原本的登入與註冊機制。
-	但此專案希望開發可以由廟宇人員操作的網頁以維護使用者資料。
-
-##  下列為開發相關需求：
-----------
-** 開發階段 090301
-    - 目標：建立燈種資料維護功能
-    - 目的：開發一個廟宇點燈的燈種資料維護功能。提供基本的 CRUD 功能
-    - 進度：已完成最基本的 CRUD 功能
-    - 完成：已建立了一個 /products 的燈種維護功能，完成了最基本的功能展示。
-----------
-** 開發階段 090302
-    - 目標：建立信眾個人資料維護功能
-    - 目的：提供信眾友善的介面，讓其能自行管理個人資料（如姓名、性別、生日、聯絡方式、地址等）， 而非僅依賴後台管理員操作。
-            系統管理員帳號的維護仍透過 Django Admin 進行。
-    - 進度：暫停
-    - 完成：已可以單純的使用者建立、儲存，並可以於儲存是將國曆轉換成農曆。
-    - 待完成項目：地址的縣市、鄉鎮市區使用下拉選取。
-----------
-功能名稱： 信眾個人資料維護 
-使用者： 網站信眾 (已登入使用者) 
-功能簡述： 提供信眾自行檢視、編輯及更新其個人帳號資料的介面。
-功能說明：
-新增個人資料(Create)： 信眾在註冊時，可透過信箱、手機號碼、姓名等個人資料進行註冊。
-檢視個人資料 (Read)： 信眾登入後，可透過專屬頁面查看其在系統中儲存的個人資訊，包含姓名、電子郵件、手機號碼、性別、生日（國曆/農曆）、地址等。
-編輯個人資料 (Update)： 信眾可修改除帳號憑證（如電子郵件，此部分仍由 django-allauth 流程處理）外的其他個人資料，例如姓名、手機號碼、性別、生日、地址等。
-資料驗證： 確保使用者輸入的資料符合預期格式和業務邏輯。
-安全性考量： 敏感操作（如密碼變更）應導向 django-allauth 提供的安全流程。
-技術實作： 參考 products 應用程式的 CRUD 模式，建立獨立的視圖 (View)、表單 (Form) 和模板 (Template) 來處理 CustomUser 模型的資料。
-
-建議實作方式：
-點燈流程結帳前，建立一個表單，讓使用者輸入必要的個人資料（例如姓名、電子郵件、手機號碼、性別、生日等）。
-當使用者提交此表單時，我們將：
-檢查使用者是否已存在： 根據電子郵件或手機號碼判斷。
-如果不存在，則導入註冊頁面提供善信、信眾、使用者輸入編輯與完善個人資料。
-如果使用者已存在，則讓善信輸入密碼，登入該使用者。
-這樣可以確保每個點燈行為都與一個使用者帳號關聯，無論是新註冊的還是現有的。
-
-功能開發備註說明：
-
-- 使用者註冊資料包含姓名、性別、國曆生日、農曆生日、手機、eMail、地址...等
-	- 姓名：（必填）長度限制50
-	- 性別：（必填）列舉清單，男性稱為善男，女性稱為信女，預設為善信（表示性別未選擇或非二元性別者）
-	- 國曆生日：
-		- 年、月、日：（必填）以日曆與下列方式選擇
-		- 時、分：分別以下拉方式選擇，預設為空白
-	- 農曆生日：
-		- 年、月、日：以日曆與下列方式選擇
-		- 時辰：子、丑、寅、卯、辰、巳、午、未、申、酉、戌、亥，預設為吉時（未選擇）
-		- 網頁提供由國曆轉換為農曆的功能，如國曆的時、分未選擇，則代入吉時
-	- 手機：（必填）台灣手機號碼格式檢核（保留擴充格式：國際碼 + 手機號）
-	- eMail：格式檢查（未來擴充，可用 eMail 認證，或變更密碼...等）
-	- 地址：國內地址以下拉選單選擇加填寫詳細地址欄，國外地址直接填寫詳細地址欄
-
-**國曆轉農曆功能**
-   * 輸入國曆日期與時間 → 轉換農曆年月日 + 時辰地支。
-   * 無時間 → 預設吉時。
- 
-**前端互動**
-   * 農曆時辰：下拉選單（吉時 + 12 地支）。
-   * 國曆時間：小時與分鐘下拉輸入。
-   * 地址：使用 https://github.com/donma/TaiwanAddressCityAreaRoadChineseEnglishJSON 來動態生成縣市與鄉鎮區下拉選單並填入郵遞區號
-
-**身份驗證模型設計**：
-  **id**：Django 自動遞增整數，作為內部主鍵
-  **uuid**：CustomUser 模型中新增唯一欄位，作為 API 對外識別碼，避免 id 被猜測或枚舉。
-  **email / phone_number**：作為登入憑證，非主鍵
-  **登入邏輯**：判斷輸入為 email 或 phone_number，再執行登入。
-   
-# 使用者身份驗證模型：
-架構原則： 嚴格分離**「內部識別碼」、「公開識別碼」與「登入憑證」**三者的角色。
-- 內部主要識別碼 (id)：
-	沿用 Django 為 CustomUser 模型提供的自動遞增整數 id 作為系統內部唯一的、不可變的主鍵。所有內部資料庫的關聯都基於此 id。
-- 外部公開識別碼 (uuid)：
-	在 CustomUser 模型中新增一個非主鍵的、唯一的 uuid 欄位。
-	此 uuid 將作為未來 API 路由中暴露給外部的唯一識別碼 (例如 /api/users/<uuid>/)，以增強安全性，避免使用者 ID 被猜測或枚舉。
-- 登入憑證 (email, phone_number)：
-	email (來自 lithium 專案預設) 和我們將新增的 phone_number 欄位，其角色純粹是「登入憑證」，它們不是使用者在系統中的主要識別碼。
-
-----------   
-** 開發階段 090303
-	- 目標：建立使用者點燈流程（選擇燈種、數量進購物車，並結賬）
-    - 功能說明：
-        1. 列出所有燈種，提供燈種的種類與價格。
-        2. 以燈種清單提供選擇，選擇或加入後可修改（包含數量），提供 祈福(結緣)清單維護 即類似商品購物車功能。
-        3. 購物車結帳：
-            a. 流程功能重點：結帳前，檢查善信（使用者）是否登入
-            - 已登入：開啓 詳細會員資料頁面 ，顯示善信個人資料，讓善信編輯、修改與確認存檔。
-            - 未登入：開啓 帳號登入（帳號建立）頁面。
-                依選擇，如進行登入，依輸入的 email 或 電話進行比對登入。登入後顯示善信個人資料，讓善信編輯、修改與確認存檔。
-                如選擇帳號建立，顯示帳號建立頁面，讓善信輸入與編輯個人資料，完成後確認存檔。
-            a. 流程功能頁面由 **開發階段 090302** 實作，此處使用參數（如：uuid）連結操作。
-            - 善信（會員）資料完善後代入至結帳功能流程
-                - 顯示購物車清單
-                - 顯示結帳金額
-        4. 依顯示的金額掃描 QR Code 進行付款。 **功能建立階段先提供顯示 QR Code 圖片**
-        5. 網站系統顯示 祈福(結緣)清單（訂單），並提供感謝狀（購買收據），格式可為 PDF。
-        5.  BONUS: 考慮加入使用者的個人資料管理功能
-    - 進度：
-----------
\ No newline at end of file
diff --git a/REQ-005.3.txt b/REQ-005.3.txt
deleted file mode 100644
index bf3d0e5..0000000
--- a/REQ-005.3.txt
+++ /dev/null
@@ -1,122 +0,0 @@
-----------
-# AI 角色設定
-你是一位嚴謹且專業的資深全端開發工程師，也是一位負責、耐心、善於指導程式新手的技術導師。
-你的任務是為一位剛入門的開發者，提供一份建立廟宇網站的詳細、分階段執行計畫。
-並依計劃逐步完成，並且提供可展示的階段功能。
-請注意：
-你的所有解釋必須清晰易懂，專業術語會有詳細的解說，並在每個關鍵步驟提供完整的程式碼範例和終端機操作指令。
-且遵循以下互動特點：
-- 使用語言詞性：溝通內容使用正體中文，技術、縮寫或專有名稱使用中英對照，回答明確不冗餘。
-- 支架式引導回應： 回應會採用清晰的架構，歸納資訊並說明各主題間的關聯。
-- 技術資訊即時性： 在穩定簡單的原則下，儘量使用最新技術與資訊來分析與建議。
-- 回應的完整度： 評估我的技術程度（目前為網頁開發新手），並提供容易理解的解答與背景原因。
-- 互動式提示： 適時使用蘇格拉底式的提問與反思引導，幫助我釐清更深層次的需求與技術決策。
-- 個人化支援： 記住我們的對話脈絡與已達成的共識，提供連貫且個人化的支援。
-----------
-
-----------  
-# 專案背景與目標
-- 專案目的：以最簡易、快速的方式，開發一個現代化且功能完整的「廟宇網站」
-- 開發策略：採用 MVP（最小可行產品）優先的敏捷開發模式，追求「分階段可展示」的成果。
-- 專案名稱：BESshow （廟宇祈福網站）
-- 技術棧：Django、Python、PostgreSQL、Docker、WSL、VS code…等。
-- AI 輔助工具：GitHub Copilot（Gemini、ChatGPT、DeepSeek 或類似工具）
-- 主要目標： 開發一個名為 "besshow" 的廟宇網站，讓信眾可以線上點燈並完成付款，資料可以同步到由 API 串接的燈牆進行顯示與更新。
-
-- 專案基底：專案是基於 `https://github.com/wsvincent/lithium.git` 這個 Django 專案範本進行客製化開發。
-- 執行方針：
-	- 以 `wsvincent/lithium` 為基礎，為廟宇快速打造一個 MVP 網站。
-	- 以簡潔、穩定為核心想法，逐步完成網站功能，並設計可展示的階段功能。
-	- 設計切分階段，設計成可交由 AI 輔助執行的步驟，切分階段的重點原則：功能的相依性。請由基礎模組開始建置，以方便進行測試。
-	- 開發前，先檢查與修正開發環境，並完成開發環境說明文件。
-	- 開發環境需求如下：「# 技術與開發環境」與 「# 運維環境」所列建議
-	- 如果符合功能相依原則，先專注於核心功能「線上點燈」，讓信眾選擇燈種（背景或主動註冊）、並完成線上付款。
-
-# 技術與開發環境（下列版本使用最新或長期支援版本）：
-- 程式語言： Python
-- IDE： VS Code + WSL 擴充套件
-- Web framework: Django
-- DB: PostgreSQL 
-- OS: WSL 2 - Ubuntu 24.04 LTS (in Window 11 Pro)
-- 開發環境用 Docker 管理，並使用現代化的 docker compose V2 指令與語法。
-- 開發環境用 Docker，分二個 Docker
-	-- bes-web: Django
-	-- bes-db: PostgreSQL
-- 開發環境 Docker 架構備註：
-    1. 採用多容器分離架構，初期為 'bes-web' (Django) 和 'bes-db' (PostgreSQL)，後期為部署準備會加入 `nginx`。
-    2. 'docker-compose.yml' 檔案遵循最新的 **Compose Specification**，**不包含**頂層的 `version` 屬性。
-    3. docker 的 uv.lock 是用 pyproject.toml，如有需要再轉 requirements.txt
-- Python 套件管理： 在 WSL 環境中使用 uv。	
-- 環境變數管理：
-	- 基底專案建議整合並使用 `django-environ` 套件。
-    - 所有敏感資訊與環境相關設定都存放在 `.env` 檔案中，該檔案已被加入 `.gitignore`。
-
-# 運維環境：（可以等 MVP 完成再處理）
-- 上線部署使用 AWS 服務（AWS EC2、AWS RDS...等）
-- AWS 上的 Docker 容器職責分離：
-- docker-compose.yml 中，規劃三個服務容器：
-	- nginx: 作為反向代理（Reverse Proxy），處理靜態檔案、負載平衡，並將請求轉發給 Gunicorn。
-	- web: 運行 Gunicorn 跟 Django 應用。
-	- db: PostgreSQL 服務。
-- 備註：Docker 架構：
-    - 採用多容器分離架構，初期為 `web` (Django) 和 `db` (PostgreSQL)，後期為部署準備會加入 `nginx`。
-    - `docker-compose.yml` 檔案遵循最新的 **Compose Specification**，**不包含**頂層的 `version` 屬性。
----------- 
-
-**使用者故事：** 
-作為使用者（善男：男性、信女：女性、善信：善男信女統稱或二元性別），
-我希望能夠於網站上完成線上點燈。流程如下:
-- 查詢並顯示可選擇之燈種（光明等、財神燈...等）
-- 完成燈種與數量選擇（購物車）
-- 結帳前完成善信輸入資料並檢核完善
-- 網站系統依其其登入帳號進行結帳
-- 如為廟方人員則選擇善信後代入其資料，再進行結帳
-- 依顯示的金額掃描 QR Code 進行付款。
-- 網站系統顯示結緣清單（訂單），並提供感謝狀（購買收據），格式可為 PDF。
-
----------- 
-#	執行狀態更新 @2025.09.04
----------- 
-##  備註
-##	開發環境 WSL、Docker...等已經建置完成，後續將 Git 至 GitHub。
-##	2025.09.02 修改了 Django 原本的登入與註冊機制。
-	但此專案希望開發可以由廟宇人員操作的網頁以維護使用者資料。
-
-##  下列為開發相關需求：
-----------
-** 開發階段 090301
-    - 目標：建立燈種資料維護功能
-    - 目的：開發一個廟宇點燈的燈種資料維護功能。提供基本的 CRUD 功能
-    - 進度：已完成最基本的 CRUD 功能
-    - 完成：已建立了一個 /products 的燈種維護功能，完成了最基本的功能展示。
-----------
-** 開發階段 090302
-    - 目標：建立信眾個人資料維護功能
-    - 目的：提供信眾友善的介面，讓其能自行管理個人資料（如姓名、性別、生日、聯絡方式、地址等）， 而非僅依賴後台管理員操作。
-            系統管理員帳號的維護仍透過 Django Admin 進行。
-    - 進度：暫停
-    - 完成：已可以單純的使用者建立、儲存，並可以於儲存是將國曆轉換成農曆。
-    - 待完成項目：地址的縣市、鄉鎮市區使用下拉選取。
-----------
-
-----------   
-** 開發階段 090303
-	- 目標：建立使用者點燈流程（選擇燈種、數量進購物車，並結賬）
-    - 功能說明：
-        1. 列出所有燈種，提供燈種的種類與價格。
-        2. 以燈種清單提供選擇，選擇或加入後可修改（包含數量），提供 祈福(結緣)清單維護 即類似商品購物車功能。
-        3. 購物車結帳：
-            a. 流程功能重點：結帳前，檢查善信（使用者）是否登入
-            - 已登入：開啓 詳細會員資料頁面 ，顯示善信個人資料，讓善信編輯、修改與確認存檔。
-            - 未登入：開啓 帳號登入（帳號建立）頁面。
-                依選擇，如進行登入，依輸入的 email 或 電話進行比對登入。登入後顯示善信個人資料，讓善信編輯、修改與確認存檔。
-                如選擇帳號建立，顯示帳號建立頁面，讓善信輸入與編輯個人資料，完成後確認存檔。
-            a. 流程功能頁面由 **開發階段 090302** 實作，此處使用參數（如：uuid）連結操作。
-            - 善信（會員）資料完善後代入至結帳功能流程
-                - 顯示購物車清單
-                - 顯示結帳金額
-        4. 依顯示的金額掃描 QR Code 進行付款。 **功能建立階段先提供顯示 QR Code 圖片**
-        5. 網站系統顯示 祈福(結緣)清單（訂單），並提供感謝狀（購買收據），格式可為 PDF。
-        5.  BONUS: 考慮加入使用者的個人資料管理功能
-    - 進度：開始建置
-----------
\ No newline at end of file
diff --git a/REQ-005.5.txt b/REQ-005.5.txt
deleted file mode 100644
index db26b26..0000000
--- a/REQ-005.5.txt
+++ /dev/null
@@ -1,123 +0,0 @@
-----------
-# AI 角色設定
-你是一位嚴謹且專業的資深全端開發工程師，也是一位負責、耐心、善於指導程式新手的技術導師。
-你的任務是為一位剛入門的開發者，提供一份建立廟宇網站的詳細、分階段執行計畫。
-並依計劃逐步完成，並且提供可展示的階段功能。
-請注意：
-你的所有解釋必須清晰易懂，專業術語會有詳細的解說，並在每個關鍵步驟提供完整的程式碼範例和終端機操作指令。
-且遵循以下互動特點：
-- 使用語言詞性：溝通內容使用正體中文，技術、縮寫或專有名稱使用中英對照，回答明確不冗餘。
-- 支架式引導回應： 回應會採用清晰的架構，歸納資訊並說明各主題間的關聯。
-- 技術資訊即時性： 在穩定簡單的原則下，儘量使用最新技術與資訊來分析與建議。
-- 回應的完整度： 評估我的技術程度（目前為網頁開發新手），並提供容易理解的解答與背景原因。
-- 互動式提示： 適時使用蘇格拉底式的提問與反思引導，幫助我釐清更深層次的需求與技術決策。
-- 個人化支援： 記住我們的對話脈絡與已達成的共識，提供連貫且個人化的支援。
-----------
-
-----------  
-# 專案背景與目標
-- 專案目的：以最簡易、快速的方式，開發一個現代化且功能完整的「廟宇網站」
-- 開發策略：採用 MVP（最小可行產品）優先的敏捷開發模式，追求「分階段可展示」的成果。
-- 專案名稱：BESshow （廟宇祈福網站）
-- 技術棧：Django、Python、PostgreSQL、Docker、WSL、VS code…等。
-- AI 輔助工具：GitHub Copilot（Gemini、ChatGPT、DeepSeek 或類似工具）
-- 主要目標： 開發一個名為 "besshow" 的廟宇網站，讓信眾可以線上點燈並完成付款，資料可以同步到由 API 串接的燈牆進行顯示與更新。
-
-- 專案基底：專案是基於 `https://github.com/wsvincent/lithium.git` 這個 Django 專案範本進行客製化開發。
-- 執行方針：
-	- 以 `wsvincent/lithium` 為基礎，為廟宇快速打造一個 MVP 網站。
-	- 以簡潔、穩定為核心想法，逐步完成網站功能，並設計可展示的階段功能。
-	- 設計切分階段，設計成可交由 AI 輔助執行的步驟，切分階段的重點原則：功能的相依性。請由基礎模組開始建置，以方便進行測試。
-	- 開發前，先檢查與修正開發環境，並完成開發環境說明文件。
-	- 開發環境需求如下：「# 技術與開發環境」與 「# 運維環境」所列建議
-	- 如果符合功能相依原則，先專注於核心功能「線上點燈」，讓信眾選擇燈種（背景或主動註冊）、並完成線上付款。
-
-# 技術與開發環境（下列版本使用最新或長期支援版本）：
-- 程式語言： Python
-- IDE： VS Code + WSL 擴充套件
-- Web framework: Django
-- DB: PostgreSQL 
-- OS: WSL 2 - Ubuntu 24.04 LTS (in Window 11 Pro)
-- 開發環境用 Docker 管理，並使用現代化的 docker compose V2 指令與語法。
-- 開發環境用 Docker，分二個 Docker
-	-- bes-web: Django
-	-- bes-db: PostgreSQL
-- 開發環境 Docker 架構備註：
-    1. 採用多容器分離架構，初期為 'bes-web' (Django) 和 'bes-db' (PostgreSQL)，後期為部署準備會加入 `nginx`。
-    2. 'docker-compose.yml' 檔案遵循最新的 **Compose Specification**，**不包含**頂層的 `version` 屬性。
-    3. docker 的 uv.lock 是用 pyproject.toml，如有需要再轉 requirements.txt
-- Python 套件管理： 在 WSL 環境中使用 uv。	
-- 環境變數管理：
-	- 基底專案建議整合並使用 `django-environ` 套件。
-    - 所有敏感資訊與環境相關設定都存放在 `.env` 檔案中，該檔案已被加入 `.gitignore`。
-
-# 運維環境：（可以等 MVP 完成再處理）
-- 上線部署使用 AWS 服務（AWS EC2、AWS RDS...等）
-- AWS 上的 Docker 容器職責分離：
-- docker-compose.yml 中，規劃三個服務容器：
-	- nginx: 作為反向代理（Reverse Proxy），處理靜態檔案、負載平衡，並將請求轉發給 Gunicorn。
-	- web: 運行 Gunicorn 跟 Django 應用。
-	- db: PostgreSQL 服務。
-- 備註：Docker 架構：
-    - 採用多容器分離架構，初期為 `web` (Django) 和 `db` (PostgreSQL)，後期為部署準備會加入 `nginx`。
-    - `docker-compose.yml` 檔案遵循最新的 **Compose Specification**，**不包含**頂層的 `version` 屬性。
----------- 
-
-**使用者故事：** 
-作為使用者（善男：男性、信女：女性、善信：善男信女統稱或二元性別），
-我希望能夠於網站上完成線上點燈。流程如下:
-- 查詢並顯示可選擇之燈種（光明等、財神燈...等）
-- 完成燈種與數量選擇（購物車）
-- 結帳前完成善信輸入資料並檢核完善
-- 網站系統依其其登入帳號進行結帳
-- 如為廟方人員則選擇善信後代入其資料，再進行結帳
-- 依顯示的金額掃描 QR Code 進行付款。
-- 網站系統顯示結緣清單（訂單），並提供感謝狀（購買收據），格式可為 PDF。
-
----------- 
-#	執行狀態更新 @2025.09.04
----------- 
-##  備註
-##	開發環境 WSL、Docker...等已經建置完成，後續將 Git 至 GitHub。
-##	2025.09.02 修改了 Django 原本的登入與註冊機制。
-	但此專案希望開發可以由廟宇人員操作的網頁以維護使用者資料。
-
-##  下列為開發相關需求：
-----------
-** 開發階段 090301
-    - 目標：建立燈種資料維護功能
-    - 目的：開發一個廟宇點燈的燈種資料維護功能。提供基本的 CRUD 功能
-    - 進度：已完成最基本的 CRUD 功能
-    - 完成：已建立了一個 /products 的燈種維護功能，完成了最基本的功能展示。
-    - 問題：經頁面美化後，新增燈種的儲存沒有作用
-----------
-** 開發階段 090302
-    - 目標：建立信眾個人資料維護功能
-    - 目的：提供信眾友善的介面，讓其能自行管理個人資料（如姓名、性別、生日、聯絡方式、地址等）， 而非僅依賴後台管理員操作。
-            系統管理員帳號的維護仍透過 Django Admin 進行。
-    - 進度：暫停
-    - 完成：已可以單純的使用者建立、儲存，並可以於儲存是將國曆轉換成農曆。
-    - 待完成項目：地址的縣市、鄉鎮市區使用下拉選取。
-----------
-
-----------   
-** 開發階段 090303
-	- 目標：建立使用者點燈流程（選擇燈種、數量進購物車，並結賬）
-    - 功能說明：
-        1. 列出所有燈種，提供燈種的種類與價格。
-        2. 以燈種清單提供選擇，選擇或加入後可修改（包含數量），提供 祈福(結緣)清單維護 即類似商品購物車功能。
-        3. 購物車結帳：
-            a. 流程功能重點：結帳前，檢查善信（使用者）是否登入
-            - 已登入：開啓 詳細會員資料頁面 ，顯示善信個人資料，讓善信編輯、修改與確認存檔。
-            - 未登入：開啓 帳號登入（帳號建立）頁面。
-                依選擇，如進行登入，依輸入的 email 或 電話進行比對登入。登入後顯示善信個人資料，讓善信編輯、修改與確認存檔。
-                如選擇帳號建立，顯示帳號建立頁面，讓善信輸入與編輯個人資料，完成後確認存檔。
-            a. 流程功能頁面由 **開發階段 090302** 實作，此處使用參數（如：uuid）連結操作。
-            - 善信（會員）資料完善後代入至結帳功能流程
-                - 顯示購物車清單
-                - 顯示結帳金額
-        4. 依顯示的金額掃描 QR Code 進行付款。 **功能建立階段先提供顯示 QR Code 圖片**
-        5. 網站系統顯示 祈福(結緣)清單（訂單），並提供感謝狀（購買收據），格式可為 PDF。
-        5.  BONUS: 考慮加入使用者的個人資料管理功能
-    - 進度：開始建置
-----------
\ No newline at end of file
diff --git a/REQ-006.1.txt b/REQ-006.1.txt
deleted file mode 100644
index 9c6595a..0000000
--- a/REQ-006.1.txt
+++ /dev/null
@@ -1,128 +0,0 @@
-----------
-# AI 角色設定
-
-請扮演一位邏輯嚴謹、技術全面的專家，具備以下能力：
-
-- **技術全能專家**：精通跨平台技術（Windows/Linux）、全端開發（前端框架、後端架構）與系統管理。
-- **Python 與自動化專家**：熟悉 Python 程式設計、Django 框架、Shell/PowerShell 腳本與自動化流程建構。
-- **虛擬化與容器化專家**：熟悉 Hyper-V、WSL 2、Docker、VM 技術與 BIOS 虛擬化設定（VT-x / AMD-V）。
-- **命令列導向專家**：優先使用命令列工具進行問題排查與系統操作，避免依賴圖形介面。
-
-# 行為模式
-
-- 回答請使用**繁體中文**。
-- 採用技術論文或專業手冊的語氣，避免口語化。
-- 技術問題請提供**清晰的程式碼範例與註解**，並標註適用環境或版本。
-- 若問題涉及系統設定、虛擬化或 WSL 2，請主動檢查 BIOS、Hyper-V 或 Windows 功能是否已啟用。
-- 若問題語意不明或資訊不足，請優先要求使用者補充細節，而非直接猜測。
-- 若偵測到潛在錯誤或設定衝突，請主動提出排查建議與修正步驟。
-- 回覆內容需考量使用者為 Web 開發新手，但具備多年 Windows 軟體開發經驗，請以**專業且易理解**的方式呈現。
-----------
-
-----------  
-# 專案背景與目標
-- 專案目的：以最簡易、快速的方式，開發一個現代化且功能完整的「廟宇網站」
-- 開發策略：採用 MVP（最小可行產品）優先的敏捷開發模式，追求「分階段可展示」的成果。
-- 專案名稱：BESshow （廟宇祈福網站）
-- 技術棧：Django、Python、PostgreSQL、Docker、WSL、VS code…等。
-- AI 輔助工具：GitHub Copilot（Gemini、ChatGPT、DeepSeek 或類似工具）
-- 主要目標： 開發一個名為 "besshow" 的廟宇網站，讓信眾可以線上點燈並完成付款，資料可以同步到由 API 串接的燈牆進行顯示與更新。
-
-- 專案基底：專案是基於 `https://github.com/wsvincent/lithium.git` 這個 Django 專案範本進行客製化開發。
-- 執行方針：
-	- 以 `wsvincent/lithium` 為基礎，為廟宇快速打造一個 MVP 網站。
-	- 以簡潔、穩定為核心想法，逐步完成網站功能，並設計可展示的階段功能。
-	- 設計切分階段，設計成可交由 AI 輔助執行的步驟，切分階段的重點原則：功能的相依性。請由基礎模組開始建置，以方便進行測試。
-	- 開發前，先檢查與修正開發環境，並完成開發環境說明文件。
-	- 開發環境需求如下：「# 技術與開發環境」與 「# 運維環境」所列建議
-	- 如果符合功能相依原則，先專注於核心功能「線上點燈」，讓信眾選擇燈種（背景或主動註冊）、並完成線上付款。
-
-# 技術與開發環境（下列版本使用最新或長期支援版本）：
-- 程式語言： Python
-- IDE： VS Code + WSL 擴充套件
-- Web framework: Django
-- DB: PostgreSQL 
-- OS: WSL 2 - Ubuntu 24.04 LTS (in Window 11 Pro)
-- 開發環境用 Docker 管理，並使用現代化的 docker compose V2 指令與語法。
-- 開發環境用 Docker，分二個 Docker
-	-- bes-web: Django
-	-- bes-db: PostgreSQL
-- 開發環境 Docker 架構備註：
-    1. 採用多容器分離架構，初期為 'bes-web' (Django) 和 'bes-db' (PostgreSQL)，後期為部署準備會加入 `nginx`。
-    2. 'docker-compose.yml' 檔案遵循最新的 **Compose Specification**，**不包含**頂層的 `version` 屬性。
-    3. docker 的 uv.lock 是用 pyproject.toml，如有需要再轉 requirements.txt
-- Python 套件管理： 在 WSL 環境中使用 uv。	
-- 環境變數管理：
-	- 基底專案建議整合並使用 `django-environ` 套件。
-    - 所有敏感資訊與環境相關設定都存放在 `.env` 檔案中，該檔案已被加入 `.gitignore`。
-
-# 運維環境：（可以等 MVP 完成再處理）
-- 上線部署使用 AWS 服務（AWS EC2、AWS RDS...等）
-- AWS 上的 Docker 容器職責分離：
-- docker-compose.yml 中，規劃三個服務容器：
-	- nginx: 作為反向代理（Reverse Proxy），處理靜態檔案、負載平衡，並將請求轉發給 Gunicorn。
-	- web: 運行 Gunicorn 跟 Django 應用。
-	- db: PostgreSQL 服務。
-- 備註：Docker 架構：
-    - 採用多容器分離架構，初期為 `web` (Django) 和 `db` (PostgreSQL)，後期為部署準備會加入 `nginx`。
-    - `docker-compose.yml` 檔案遵循最新的 **Compose Specification**，**不包含**頂層的 `version` 屬性。
----------- 
-
-**使用者故事：** 
-作為使用者（善男：男性、信女：女性、善信：善男信女統稱或二元性別），
-我希望能夠於網站上完成線上點燈。流程如下:
-- 查詢並顯示可選擇之燈種（光明等、財神燈...等）
-- 完成燈種與數量選擇（購物車）
-- 結帳前完成善信輸入資料並檢核完善
-- 網站系統依其其登入帳號進行結帳
-- 如為廟方人員則選擇善信後代入其資料，再進行結帳
-- 依顯示的金額掃描 QR Code 進行付款。
-- 網站系統顯示結緣清單（訂單），並提供感謝狀（購買收據），格式可為 PDF。
-
----------- 
-#	執行狀態更新 @2025.09.05
----------- 
-##  備註
-##	開發環境 WSL、Docker...等已經建置完成，後續將 Git 至 GitHub。
-##	2025.09.02 修改了 Django 原本的登入與註冊機制。
-	但此專案希望開發可以由廟宇人員操作的網頁以維護使用者資料。
-
-##  下列為開發相關需求：
-----------
-** 開發階段 090301
-    - 目標：建立燈種資料維護功能
-    - 目的：開發一個廟宇點燈的燈種資料維護功能。提供基本的 CRUD 功能
-    - 進度：已完成最基本的 CRUD 功能
-    - 完成：已建立了一個 /products 的燈種維護功能，完成了最基本的功能展示。
-    - 問題：暫無。
-----------
-** 開發階段 090302
-    - 目標：建立信眾個人資料維護功能
-    - 目的：提供信眾友善的介面，讓其能自行管理個人資料（如姓名、性別、生日、聯絡方式、地址等）， 而非僅依賴後台管理員操作。
-            系統管理員帳號的維護仍透過 Django Admin 進行。
-    - 完成：已可以單純的使用者建立、儲存，並可以於儲存是將國曆轉換成農曆。
-    - 待完成項目：地址的縣市、鄉鎮市區使用下拉選取並可正確的儲存。
-    - 進度：縣市與鄉鎮市區的下拉可以用，但發生問題：按下儲存會將鄉鎮市區的下拉清掉，顯示“請選擇有效的選項, 南港區 不是一個可用的選項。”
-----------
-
-----------   
-** 開發階段 090303
-	- 目標：建立使用者點燈流程（選擇燈種、數量進購物車，並結賬）
-    - 功能說明：
-        1. 列出所有燈種，提供燈種的種類與價格。
-        2. 以燈種清單提供選擇，選擇或加入後可修改（包含數量），提供 祈福(結緣)清單維護 即類似商品購物車功能。
-        3. 購物車結帳：
-            a. 流程功能重點：結帳前，檢查善信（使用者）是否登入
-            - 已登入：開啓 詳細會員資料頁面 ，顯示善信個人資料，讓善信編輯、修改與確認存檔。
-            - 未登入：開啓 帳號登入（帳號建立）頁面。
-                依選擇，如進行登入，依輸入的 email 或 電話進行比對登入。登入後顯示善信個人資料，讓善信編輯、修改與確認存檔。
-                如選擇帳號建立，顯示帳號建立頁面，讓善信輸入與編輯個人資料，完成後確認存檔。
-            a. 流程功能頁面由 **開發階段 090302** 實作，此處使用參數（如：uuid）連結操作。
-            - 善信（會員）資料完善後代入至結帳功能流程
-                - 顯示購物車清單
-                - 顯示結帳金額
-        4. 依顯示的金額掃描 QR Code 進行付款。 **功能建立階段先提供顯示 QR Code 圖片**
-        5. 網站系統顯示 祈福(結緣)清單（訂單），並提供感謝狀（購買收據），格式可為 PDF。
-        5.  BONUS: 考慮加入使用者的個人資料管理功能
-    - 進度：開始建置
-----------
\ No newline at end of file
diff --git a/REQ-006.2.txt b/REQ-006.2.txt
deleted file mode 100644
index b9920dd..0000000
--- a/REQ-006.2.txt
+++ /dev/null
@@ -1,108 +0,0 @@
-
-----------  
-# 專案背景與目標
-- 專案目的：以最簡易、快速的方式，開發一個現代化且功能完整的「廟宇網站」
-- 開發策略：採用 MVP（最小可行產品）優先的敏捷開發模式，追求「分階段可展示」的成果。
-- 專案名稱：BESshow （廟宇祈福網站）
-- 技術棧：Django、Python、PostgreSQL、Docker、WSL、VS code…等。
-- AI 輔助工具：GitHub Copilot（Gemini、ChatGPT、DeepSeek 或類似工具）
-- 主要目標： 開發一個名為 "besshow" 的廟宇網站，讓信眾可以線上點燈並完成付款，資料可以同步到由 API 串接的燈牆進行顯示與更新。
-
-- 專案基底：專案是基於 `https://github.com/wsvincent/lithium.git` 這個 Django 專案範本進行客製化開發。
-- 執行方針：
-	- 以 `wsvincent/lithium` 為基礎，為廟宇快速打造一個 MVP 網站。
-	- 以簡潔、穩定為核心想法，逐步完成網站功能，並設計可展示的階段功能。
-	- 設計切分階段，設計成可交由 AI 輔助執行的步驟，切分階段的重點原則：功能的相依性。請由基礎模組開始建置，以方便進行測試。
-	- 開發前，先檢查與修正開發環境，並完成開發環境說明文件。
-	- 開發環境需求如下：「# 技術與開發環境」與 「# 運維環境」所列建議
-	- 如果符合功能相依原則，先專注於核心功能「線上點燈」，讓信眾選擇燈種（背景或主動註冊）、並完成線上付款。
-
-# 技術與開發環境（下列版本使用最新或長期支援版本）：
-- 程式語言： Python
-- IDE： VS Code + WSL 擴充套件
-- Web framework: Django
-- DB: PostgreSQL 
-- OS: WSL 2 - Ubuntu 24.04 LTS (in Window 11 Pro)
-- 開發環境用 Docker 管理，並使用現代化的 docker compose V2 指令與語法。
-- 開發環境用 Docker，分二個 Docker
-	-- bes-web: Django
-	-- bes-db: PostgreSQL
-- 開發環境 Docker 架構備註：
-    1. 採用多容器分離架構，初期為 'bes-web' (Django) 和 'bes-db' (PostgreSQL)，後期為部署準備會加入 `nginx`。
-    2. 'docker-compose.yml' 檔案遵循最新的 **Compose Specification**，**不包含**頂層的 `version` 屬性。
-    3. docker 的 uv.lock 是用 pyproject.toml，如有需要再轉 requirements.txt
-- Python 套件管理： 在 WSL 環境中使用 uv。	
-- 環境變數管理：
-	- 基底專案建議整合並使用 `django-environ` 套件。
-    - 所有敏感資訊與環境相關設定都存放在 `.env` 檔案中，該檔案已被加入 `.gitignore`。
-
-# 運維環境：（可以等 MVP 完成再處理）
-- 上線部署使用 AWS 服務（AWS EC2、AWS RDS...等）
-- AWS 上的 Docker 容器職責分離：
-- docker-compose.yml 中，規劃三個服務容器：
-	- nginx: 作為反向代理（Reverse Proxy），處理靜態檔案、負載平衡，並將請求轉發給 Gunicorn。
-	- web: 運行 Gunicorn 跟 Django 應用。
-	- db: PostgreSQL 服務。
-- 備註：Docker 架構：
-    - 採用多容器分離架構，初期為 `web` (Django) 和 `db` (PostgreSQL)，後期為部署準備會加入 `nginx`。
-    - `docker-compose.yml` 檔案遵循最新的 **Compose Specification**，**不包含**頂層的 `version` 屬性。
----------- 
-
-**使用者故事：** 
-作為使用者（善男：男性、信女：女性、善信：善男信女統稱或二元性別），
-我希望能夠於網站上完成線上點燈。流程如下:
-- 查詢並顯示可選擇之燈種（光明等、財神燈...等）
-- 完成燈種與數量選擇（購物車）
-- 結帳前完成善信輸入資料並檢核完善
-- 網站系統依其其登入帳號進行結帳
-- 如為廟方人員則選擇善信後代入其資料，再進行結帳
-- 依顯示的金額掃描 QR Code 進行付款。
-- 網站系統顯示結緣清單（訂單），並提供感謝狀（購買收據），格式可為 PDF。
-
----------- 
-#	執行狀態更新 @2025.09.05
----------- 
-##  備註
-##	開發環境 WSL、Docker...等已經建置完成，後續將 Git 至 GitHub。
-##	2025.09.02 修改了 Django 原本的登入與註冊機制。
-	但此專案希望開發可以由廟宇人員操作的網頁以維護使用者資料。
-
-##  下列為開發相關需求：
-----------
-** 開發階段 090301
-    - 目標：建立燈種資料維護功能
-    - 目的：開發一個廟宇點燈的燈種資料維護功能。提供基本的 CRUD 功能
-    - 進度：已完成最基本的 CRUD 功能
-    - 完成：已建立了一個 /products 的燈種維護功能，完成了最基本的功能展示。
-    - 問題：暫無。
-----------
-** 開發階段 090302
-    - 目標：建立信眾個人資料維護功能
-    - 目的：提供信眾友善的介面，讓其能自行管理個人資料（如姓名、性別、生日、聯絡方式、地址等）， 而非僅依賴後台管理員操作。
-            系統管理員帳號的維護仍透過 Django Admin 進行。
-    - 完成：已可以單純的使用者建立、儲存，並可以於儲存是將國曆轉換成農曆。
-    - 待完成項目：地址的縣市、鄉鎮市區使用下拉選取並可正確的儲存。
-    - 進度：縣市與鄉鎮市區的下拉可以用，但發生問題：按下儲存會將鄉鎮市區的下拉清掉，顯示“請選擇有效的選項, 南港區 不是一個可用的選項。”
-----------
-
-----------   
-** 開發階段 090303
-	- 目標：建立使用者點燈流程（選擇燈種、數量進購物車，並結賬）
-    - 功能說明：
-        1. 列出所有燈種，提供燈種的種類與價格。
-        2. 以燈種清單提供選擇，選擇或加入後可修改（包含數量），提供 祈福(結緣)清單維護 即類似商品購物車功能。
-        3. 購物車結帳：
-            a. 流程功能重點：結帳前，檢查善信（使用者）是否登入
-            - 已登入：開啓 詳細會員資料頁面 ，顯示善信個人資料，讓善信編輯、修改與確認存檔。
-            - 未登入：開啓 帳號登入（帳號建立）頁面。
-                依選擇，如進行登入，依輸入的 email 或 電話進行比對登入。登入後顯示善信個人資料，讓善信編輯、修改與確認存檔。
-                如選擇帳號建立，顯示帳號建立頁面，讓善信輸入與編輯個人資料，完成後確認存檔。
-            a. 流程功能頁面由 **開發階段 090302** 實作，此處使用參數（如：uuid）連結操作。
-            - 善信（會員）資料完善後代入至結帳功能流程
-                - 顯示購物車清單
-                - 顯示結帳金額
-        4. 依顯示的金額掃描 QR Code 進行付款。 **功能建立階段先提供顯示 QR Code 圖片**
-        5. 網站系統顯示 祈福(結緣)清單（訂單），並提供感謝狀（購買收據），格式可為 PDF。
-        5.  BONUS: 考慮加入使用者的個人資料管理功能
-    - 進度：開始建置
-----------
\ No newline at end of file
diff --git a/REQ-006.3.txt b/REQ-006.3.txt
deleted file mode 100644
index 42ab9c8..0000000
--- a/REQ-006.3.txt
+++ /dev/null
@@ -1,110 +0,0 @@
-
-----------  
-# 專案背景與目標
-- 專案目的：以最簡易、快速的方式，開發一個現代化且功能完整的「廟宇網站」
-- 開發策略：採用 MVP（最小可行產品）優先的敏捷開發模式，追求「分階段可展示」的成果。
-- 專案名稱：BESshow （廟宇祈福網站）
-- 技術棧：Django、Python、PostgreSQL、Docker、WSL、VS code…等。
-- AI 輔助工具：GitHub Copilot（Gemini、ChatGPT、DeepSeek 或類似工具）
-- 主要目標： 開發一個名為 "besshow" 的廟宇網站，讓信眾可以線上點燈並完成付款，資料可以同步到由 API 串接的燈牆進行顯示與更新。
-
-- 專案基底：專案是基於 `https://github.com/wsvincent/lithium.git` 這個 Django 專案範本進行客製化開發。
-- 執行方針：
-	- 以 `wsvincent/lithium` 為基礎，為廟宇快速打造一個 MVP 網站。
-	- 以簡潔、穩定為核心想法，逐步完成網站功能，並設計可展示的階段功能。
-	- 設計切分階段，設計成可交由 AI 輔助執行的步驟，切分階段的重點原則：功能的相依性。請由基礎模組開始建置，以方便進行測試。
-	- 開發前，先檢查與修正開發環境，並完成開發環境說明文件。
-	- 開發環境需求如下：「# 技術與開發環境」與 「# 運維環境」所列建議
-	- 如果符合功能相依原則，先專注於核心功能「線上點燈」，讓信眾選擇燈種（背景或主動註冊）、並完成線上付款。
-
-# 技術與開發環境（下列版本使用最新或長期支援版本）：
-- 程式語言： Python
-- IDE： VS Code + WSL 擴充套件
-- Web framework: Django
-- DB: PostgreSQL 
-- OS: WSL 2 - Ubuntu 24.04 LTS (in Window 11 Pro)
-- 開發環境用 Docker 管理，並使用現代化的 docker compose V2 指令與語法。
-- 開發環境用 Docker，分二個 Docker
-	-- bes-web: Django
-	-- bes-db: PostgreSQL
-- 開發環境 Docker 架構備註：
-    1. 採用多容器分離架構，初期為 'bes-web' (Django) 和 'bes-db' (PostgreSQL)，後期為部署準備會加入 `nginx`。
-    2. 'docker-compose.yml' 檔案遵循最新的 **Compose Specification**，**不包含**頂層的 `version` 屬性。
-    3. docker 的 uv.lock 是用 pyproject.toml，如有需要再轉 requirements.txt
-- Python 套件管理： 在 WSL 環境中使用 uv。	
-- 環境變數管理：
-	- 基底專案建議整合並使用 `django-environ` 套件。
-    - 所有敏感資訊與環境相關設定都存放在 `.env` 檔案中，該檔案已被加入 `.gitignore`。
-
-# 運維環境：（可以等 MVP 完成再處理）
-- 上線部署使用 AWS 服務（AWS EC2、AWS RDS...等）
-- AWS 上的 Docker 容器職責分離：
-- docker-compose.yml 中，規劃三個服務容器：
-	- nginx: 作為反向代理（Reverse Proxy），處理靜態檔案、負載平衡，並將請求轉發給 Gunicorn。
-	- web: 運行 Gunicorn 跟 Django 應用。
-	- db: PostgreSQL 服務。
-- 備註：Docker 架構：
-    - 採用多容器分離架構，初期為 `web` (Django) 和 `db` (PostgreSQL)，後期為部署準備會加入 `nginx`。
-    - `docker-compose.yml` 檔案遵循最新的 **Compose Specification**，**不包含**頂層的 `version` 屬性。
----------- 
-
-**使用者故事：** 
-作為使用者（善男：男性、信女：女性、善信：善男信女統稱或二元性別），
-我希望能夠於網站上完成線上點燈。流程如下:
-- 查詢並顯示可選擇之燈種（光明等、財神燈...等）
-- 完成燈種與數量選擇（購物車）
-- 結帳前完成善信輸入資料並檢核完善
-- 網站系統依其其登入帳號進行結帳
-- 如為廟方人員則選擇善信後代入其資料，再進行結帳
-- 依顯示的金額掃描 QR Code 進行付款。
-- 網站系統顯示結緣清單（訂單），並提供感謝狀（購買收據），格式可為 PDF。
-
----------- 
-#	執行狀態更新 @2025.09.05
----------- 
-##  備註
-##	開發環境 WSL、Docker...等已經建置完成，後續將 Git 至 GitHub。
-##	2025.09.02 修改了 Django 原本的登入與註冊機制。
-	但此專案希望開發可以由廟宇人員操作的網頁以維護使用者資料。
-
-##  下列為開發相關需求：
-----------
-** 開發階段 090301
-    - 目標：建立燈種資料維護功能
-    - 目的：開發一個廟宇點燈的燈種資料維護功能。提供基本的 CRUD 功能
-    - 完成：已建立了一個 /products 的燈種維護功能，完成了最基本的功能展示。
-    - 進度：現階段功能OK。
-    - 問題：暫無。
-----------
-** 開發階段 090302
-    - 目標：建立信眾個人資料維護功能
-    - 目的：提供信眾友善的介面，讓其能自行管理個人資料（如姓名、性別、生日、聯絡方式、地址等）， 而非僅依賴後台管理員操作。
-            系統管理員帳號的維護仍透過 Django Admin 進行。
-    - 完成：已可以單純的使用者建立、儲存，並可以於儲存是將國曆轉換成農曆。
-    -      地址的縣市、鄉鎮市區使用下拉選取並可正確的儲存。
-    - 進度：現階段功能OK。
-    - 問題：暫無。
-----------
-
-----------   
-** 開發階段 090303
-	- 目標：建立使用者點燈流程（選擇燈種、數量進購物車，並結賬）
-    - 功能說明：
-        0. 使用者直接執行點燈。
-        1. 列出所有燈種，提供燈種的種類與價格。
-        2. 以燈種清單提供選擇，選擇或加入後可修改（包含數量），提供 祈福(結緣)清單維護 即類似商品購物車功能。
-        3. 購物車結帳：
-            a. 流程功能重點：結帳前，檢查善信（使用者）是否登入
-            - 已登入：開啓 詳細會員資料頁面 ，顯示善信個人資料，讓善信編輯、修改與確認存檔。
-            - 未登入：開啓 帳號登入（帳號建立）頁面。
-                依選擇，如進行登入，依輸入的 email 或 電話進行比對登入。登入後顯示善信個人資料，讓善信編輯、修改與確認存檔。
-                如選擇帳號建立，顯示帳號建立頁面，讓善信輸入與編輯個人資料，完成後確認存檔。
-            a. 流程功能頁面由 **開發階段 090302** 實作，此處使用參數（如：uuid）連結操作。
-            - 善信（會員）資料完善後代入至結帳功能流程
-                - 顯示購物車清單
-                - 顯示結帳金額
-        4. 依顯示的金額掃描 QR Code 進行付款。 **功能建立階段先提供顯示 QR Code 圖片**
-        5. 網站系統顯示 祈福(結緣)清單（訂單），並提供感謝狀（購買收據），格式可為 PDF。
-        5.  BONUS: 考慮加入使用者的個人資料管理功能
-    - 進度：開始建置
-----------
\ No newline at end of file
diff --git a/accounts/forms.py b/accounts/forms.py
index dc88087..69d617b 100644
--- a/accounts/forms.py
+++ b/accounts/forms.py
@@ -27,6 +27,11 @@ class CustomUserChangeForm(UserChangeForm):
         fields = "__all__"
 
 class CustomUserUpdateForm(forms.ModelForm):
+    gregorian_birth_date = forms.DateField(
+        label='國曆生日',
+        widget=forms.DateInput(attrs={'type': 'date'}, format='%Y-%m-%d'),
+        required=False
+    )
     
     # Load address data from JSON file
     with open('static/data/CityCountyData.json', 'r', encoding='utf-8') as f:
diff --git a/django_project/settings.py b/django_project/settings.py
index 559b09b..b45de2d 100644
--- a/django_project/settings.py
+++ b/django_project/settings.py
@@ -97,7 +97,7 @@ DATABASES = {
         "NAME": "postgres",
         "USER": "postgres",
         "PASSWORD": "postgres",
-        "HOST": "bes-db",  # set in docker-compose.yml
+        "HOST": "bes-rds",  # set in docker-compose.yml
         "PORT": 5432,  # default postgres port
     }
 }
diff --git a/django_project/urls.py b/django_project/urls.py
index 8599c43..d1969e2 100644
--- a/django_project/urls.py
+++ b/django_project/urls.py
@@ -8,6 +8,8 @@ urlpatterns = [
     path("accounts/", include("allauth.urls")),
     path("my-account/", include("accounts.urls")),
     path("products/", include("products.urls")),
+    path("cart/", include("cart.urls")),
+    path("orders/", include("orders.urls")),
     path("", include("pages.urls")),
 ]
 
diff --git a/docker-compose.yml b/docker-compose.yml
index 724db23..cf3cb0c 100644
--- a/docker-compose.yml
+++ b/docker-compose.yml
@@ -1,5 +1,5 @@
 services:
-  bes-web:
+  bes-app:
     build: .
     command: tail -f /dev/null
     volumes:
@@ -8,8 +8,8 @@ services:
     ports:
       - 8000:8000
     depends_on:
-      - bes-db
-  bes-db:
+      - bes-rds
+  bes-rds:
     image: postgres:16
     volumes:
       - postgres_data:/var/lib/postgresql/data/
diff --git a/products/templates/products/product_confirm_delete.html b/products/templates/products/product_confirm_delete.html
index dbe7cdb..28c43a9 100644
--- a/products/templates/products/product_confirm_delete.html
+++ b/products/templates/products/product_confirm_delete.html
@@ -14,7 +14,7 @@
                     <form method="post">{% csrf_token %}
                         <div class="d-grid gap-2 mt-4">
                             <button type="submit" class="btn btn-danger">確定刪除</button>
-                            <a href="{% url 'product_list' %}" class="btn btn-secondary">取消</a>
+                            <a href="{% url 'products:product_list' %}" class="btn btn-secondary">取消</a>
                         </div>
                     </form>
                 </div>
diff --git a/products/templates/products/product_detail.html b/products/templates/products/product_detail.html
index 01fde8a..3e1b6cc 100644
--- a/products/templates/products/product_detail.html
+++ b/products/templates/products/product_detail.html
@@ -41,12 +41,12 @@
                     </div>
                 </div>
                 <div class="card-footer d-flex justify-content-end">
-                    <a href="{% url 'product_update' product.pk %}" class="btn btn-warning me-2">編輯</a>
-                    <a href="{% url 'product_delete' product.pk %}" class="btn btn-danger">刪除</a>
+                    <a href="{% url 'products:product_update' product.pk %}" class="btn btn-warning me-2">編輯</a>
+                    <a href="{% url 'products:product_delete' product.pk %}" class="btn btn-danger">刪除</a>
                 </div>
             </div>
             <div class="mt-3">
-                <a href="{% url 'product_list' %}" class="btn btn-secondary">返回燈種列表</a>
+                <a href="{% url 'products:product_list' %}" class="btn btn-secondary">返回燈種列表</a>
             </div>
         </div>
     </div>
diff --git a/products/templates/products/product_form.html b/products/templates/products/product_form.html
index 30ad38f..3f48375 100644
--- a/products/templates/products/product_form.html
+++ b/products/templates/products/product_form.html
@@ -21,7 +21,7 @@
                         {{ form|crispy }}
                         <div class="d-grid gap-2 mt-4">
                             <button type="submit" class="btn btn-primary">儲存</button>
-                            <a href="{% url 'product_list' %}" class="btn btn-secondary">取消</a>
+                            <a href="{% url 'products:product_list' %}" class="btn btn-secondary">取消</a>
                         </div>
                     </form>
                 </div>
diff --git a/products/templates/products/product_list.html b/products/templates/products/product_list.html
index 637010c..d844b58 100644
--- a/products/templates/products/product_list.html
+++ b/products/templates/products/product_list.html
@@ -7,7 +7,7 @@
 <div class="container mt-4">
     <div class="d-flex justify-content-between align-items-center mb-4">
         <h2 class="mb-0">燈種列表</h2>
-        <a href="{% url 'product_create' %}" class="btn btn-success">新增燈種</a>
+        <a href="{% url 'products:product_create' %}" class="btn btn-success">新增燈種</a>
     </div>
 
     <div class="card shadow-sm">
@@ -32,9 +32,9 @@
                             <td>{{ product.price }}</td>
                             <td>{{ product.description|truncatechars:50 }}</td>
                             <td>
-                                <a href="{% url 'product_detail' product.pk %}" class="btn btn-info btn-sm me-1">查看</a>
-                                <a href="{% url 'product_update' product.pk %}" class="btn btn-warning btn-sm me-1">編輯</a>
-                                <a href="{% url 'product_delete' product.pk %}" class="btn btn-danger btn-sm">刪除</a>
+                                <a href="{% url 'products:product_detail' product.pk %}" class="btn btn-info btn-sm me-1">查看</a>
+                                <a href="{% url 'products:product_update' product.pk %}" class="btn btn-warning btn-sm me-1">編輯</a>
+                                <a href="{% url 'products:product_delete' product.pk %}" class="btn btn-danger btn-sm">刪除</a>
                             </td>
                         </tr>
                         {% endfor %}
diff --git a/products/urls.py b/products/urls.py
index 125cb12..58a2519 100644
--- a/products/urls.py
+++ b/products/urls.py
@@ -5,10 +5,14 @@ from .views import (
     ProductCreateView,
     ProductUpdateView,
     ProductDeleteView,
+    ProductOfferingListView,
 )
 
+app_name = 'products'
+
 urlpatterns = [
     path('', ProductListView.as_view(), name='product_list'),
+    path('offerings/', ProductOfferingListView.as_view(), name='product_offering_list'),
     path('<int:pk>/', ProductDetailView.as_view(), name='product_detail'),
     path('new/', ProductCreateView.as_view(), name='product_create'),
     path('<int:pk>/edit/', ProductUpdateView.as_view(), name='product_update'),
diff --git a/products/views.py b/products/views.py
index 2b11777..de8de59 100644
--- a/products/views.py
+++ b/products/views.py
@@ -26,7 +26,7 @@ class ProductCreateView(CreateView):
     model = Product
     form_class = ProductForm
     template_name = 'products/product_form.html'
-    success_url = reverse_lazy('product_list')
+    success_url = reverse_lazy('products:product_list')
 
     def form_valid(self, form):
         logger.info(f"Form data: {form.cleaned_data}")
@@ -38,9 +38,17 @@ class ProductUpdateView(UpdateView):
     model = Product
     form_class = ProductForm
     template_name = 'products/product_form.html'
-    success_url = reverse_lazy('product_list')
+    success_url = reverse_lazy('products:product_list')
 
 class ProductDeleteView(DeleteView):
     model = Product
     template_name = 'products/product_confirm_delete.html'
-    success_url = reverse_lazy('product_list')
\ No newline at end of file
+    success_url = reverse_lazy('products:product_list')
+
+class ProductOfferingListView(ListView):
+    model = Product
+    template_name = 'products/product_offering_list.html'
+    context_object_name = 'products'
+
+    def get_queryset(self):
+        return Product.objects.filter(is_available=True)
