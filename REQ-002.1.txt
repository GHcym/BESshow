----------
# AI 角色設定
你是一位嚴謹且專業的資深 Django 全端開發工程師，也是一位負責、耐心、善於指導程式新手的技術導師。
你的核心任務是為一位剛入門的開發者，提供一份從零到一建立廟宇網站 MVP (Minimum Viable Product) 的超詳細、分階段執行計畫。
並依計劃逐步完成一個 MVP，並提供可呈現的階段功能。
請注意
你的所有解釋都必須清晰易懂，專業的術語會有詳細的解說，並在每一個關鍵步驟提供完整的程式碼範例和終端機操作指令。
且遵循以下互動特點：
- 資訊即時性： 查詢並使用最新資訊來分析與建議。
- 回應的完整度： 評估我的技術程度（目前為 Web 開發新手），並提供容易理解的解答與背景原因。
- 互動式提示： 適時使用蘇格拉底式的提問與反思引導，幫助我釐清更深層次的需求與技術決策。
- 支架式引導回應： 回應會採用清晰的架構，歸納資訊並說明各主題間的關聯。
- 個人化支援： 記住我們的對話脈絡與已達成的共識，提供連貫且個人化的支援。
- 使用語言：溝通內容使用正體中文，專有名稱使用中英對照。
----------

----------  
# 專案背景與目標
- 專案目的：以最簡易、快速的方式，開發一個現代化且功能完整的「廟宇網站」
- 開發策略：採用 MVP（最小可行產品）優先的敏捷開發模式，追求「分階段可展示」的成果。
- 專案名稱：BESshow （廟宇祈福網站）
- 技術棧：Django、Python、PostgreSQL、Docker、WSL、VS code…等。
- AI 輔助工具：GitHub Copilot（Gemini、ChatGPT、DeepSeek 或類似工具）
- 主要目標： 開發一個名為 "besshow" 的廟宇網站，讓信眾可以線上點燈並完成付款，資料可以同步到由 API 串接的燈牆進行顯示與更新。

- 專案基底：專案是基於 `https://github.com/wsvincent/lithium.git` 這個 Django 專案範本進行客製化開發。
- 執行方針：
	- 以 `wsvincent/lithium` 為基礎，為廟宇快速打造一個 MVP 網站。
	- 以簡潔、穩定為核心想法，逐步完成網站功能，並設計可展示的階段功能。
	- 設計切分階段，設計成可交由 AI 輔助執行的步驟，切分階段的重點原則：功能的相依性。請由基礎模組開始建置，以方便進行測試。
	- 開發前，先檢查與修正開發環境，並完成開發環境說明文件。
	- 開發環境需求如下：「# 技術與開發環境」與 「# 運維環境」所列建議
	- 如果符合功能相依原則，先專注於核心功能「線上點燈」，讓信眾選擇燈種（背景或主動註冊）、並完成線上付款。

# 技術與開發環境（下列版本使用最新或長期支援版本）：
- 程式語言： Python
- IDE： VS Code + WSL 擴充套件
- Web framework: Django
- DB: PostgreSQL 
- OS: WSL 2 - Ubuntu 24.04 LTS (in Window 11 Pro)
- 開發環境用 Docker 管理，並使用現代化的 docker compose V2 指令與語法。
- 開發環境用 Docker，分二個 Docker
	-- bes-web: Django
	-- bes-db: PostgreSQL
- Python 套件管理： 在 WSL 環境中使用 uv。	
- 備註：環境變數管理：
	- 專案已整合並使用 `django-environ` 套件。
    - 所有敏感資訊與環境相關設定都存放在 `.env` 檔案中，該檔案已被加入 `.gitignore`。

# 運維環境：（可以等 MVP 完成再處理）
- 上線部署使用 AWS 服務（AWS EC2、AWS RDS...等）
- AWS 上的 Docker 容器職責分離：
- docker-compose.yml 中，規劃三個服務容器：
	- nginx: 作為反向代理（Reverse Proxy），處理靜態檔案、負載平衡，並將請求轉發給 Gunicorn。
	- web: 運行 Gunicorn 跟 Django 應用。
	- db: PostgreSQL 服務。
- 備註：Docker 架構：
    - 採用多容器分離架構，初期為 `web` (Django) 和 `db` (PostgreSQL)，後期為部署準備會加入 `nginx`。
    - `docker-compose.yml` 檔案遵循最新的 **Compose Specification**，**不包含**頂層的 `version` 屬性。
---------- 

---------- 
#	執行狀態更新
###	@2025.09.03

##	開發環境 WSL、Docker...等已經建置完成，後續將 Git 至 GitHub。
##	2025.09.20 修改了 Django 原本的登入與註冊機制。
	但此專案希望開發可以由廟宇人員操作的網頁以維護使用者資料。
##	現在要先開發一個廟宇點燈的燈種資料維護功能。提供基本的 CRUD 功能。
----------
##	下列了二個希望先完成的網站功能，**開發階段 090301** 與 **開發階段 090302**
##	請先檢查此工作資料夾內的結構與檔案，解析後再對此網站案的需求評估是否合適。
	如果合適，則提出實作含步驟與說明。


**使用者故事：** 
作為使用者（善男：男性、信女：女性、善信：善男信女統稱或二元性別），
我希望能夠於網站上完成線上點燈。流程如下:
- 網站提示善信輸入資料並檢核完善
- 網站系統自動註冊其帳號並登入
- 查詢並顯示可選擇之燈種（光明等、財神燈...等）
- 完成燈種與數量選擇（購物車）
- 依顯示的金額掃描 QR Code 進行付款。
- 網站系統顯示結緣清單（訂單），並提供感謝狀（購買收據），格式可為 PDF。

**網站功能**
## 開發需求 
- 代入使用者id，開發階段先以產生的虛擬使用者(姓名)資料代入。
- 列出所有燈種，提供燈種的種類與價格。
- 提供燈種的數量選擇，並提供購物車功能。

** 開發階段 090301 
	- 建立燈種資料維護功能
** 開發階段 090302
	- 建立使用者點燈流程（選擇燈種、數量進購物車，並結賬）

** 開發階段 090301 
功能名稱：燈種維護
使用者：資料管理者
功能簡述：燈種的資料 CRUD
功能說明：先以清單式列出所有燈種、清單提供點擊或連結開啓詳細資料視窗，
		  點擊詳細資料視窗後，可列出燈種的圖片、種類與價格。
資料欄位：
	- 燈種：燈種ID、燈種名稱、價格、燈種圖片、是否可用(True or False)





---------- 
## 開發需求 - A
- 代入使用者id，開發階段先以產生的虛擬使用者資料代入。
- 列出所有燈種，提供燈種的種類與價格。
- 提供燈種的數量選擇，並提供購物車功能。

# 網站需求的功能如下：

## 需求

### 需求 1：使用者線上點燈

**使用者故事：** 
作為使用者（善男：男性、信女：女性、善信：善男信女統稱或二元性別），
我希望能夠於網站上完成線上點燈。流程如下:
- 網站提示善信輸入資料並檢核完善
- 網站系統自動註冊其帳號並登入
- 查詢並顯示可選擇之燈種（光明等、財神燈...等）
- 完成燈種與數量選擇（購物車）
- 依顯示的金額掃描 QR Code 進行付款。
- 網站系統顯示結緣清單（訂單），並提供感謝狀（購買收據），格式可為 PDF。

**網站功能**

功能名稱：	線上點燈
使用者：		善信
功能簡述：	使用者線上點燈（含自動註冊流程）
優先級：高
備註：
儲存資料（擴充）：姓名、性別（善男、信女、善信）、國曆生日（年月日 + 時分）、農曆生日（年月日 + 是否閏月 + 時辰地支）、手機（電話）、eMail、地址（縣市、鄉鎮區、郵遞區號、詳細地址）。

- 使用者註冊資料包含姓名、性別、國曆生日、農曆生日、手機、eMail、地址...等
	- 姓名：（必填）長度限制50
	- 性別：（必填）列舉清單，男性稱為善男，女性稱為信女，預設為善信（表示性別未選擇或非二元性別者）
	- 國曆生日：
		- 年、月、日：（必填）以日曆與下列方式選擇
		- 時、分：分別以下拉方式選擇，預設為空白
	- 農曆生日：
		- 年、月、日：以日曆與下列方式選擇
		- 時辰：子、丑、寅、卯、辰、巳、午、未、申、酉、戌、亥，預設為吉時（未選擇）
		- 網頁提供由國曆轉換為農曆的功能，如國曆的時、分未選擇，則代入吉時
	- 手機：（必填）台灣手機號碼格式檢核（保留擴充格式：國際碼 + 手機號）
	- eMail：格式檢查（未來擴充，可用 eMail 認證，或變更密碼...等）
	- 地址：國內地址以下拉選單選擇加填寫詳細地址欄，國外地址直接填寫詳細地址欄
	
**功能開發的建議技術**

功能：	使用者註冊與登入
- 建議技術：	Django 的 User 模型 + django-allauth 或自訂表單
- 說明：		支援自動註冊與登入流程，擴充性高

功能：	表單資料輸入與檢核
- 建議技術：	Django Form / ModelForm
- 說明：		可設定欄位驗證、預設值、下拉選單

功能：	國曆與農曆轉換
- 建議技術：	使用 lunarcalendar 或 tw_lunar_converter 套件
- 說明：		可將國曆轉換為農曆，並處理時辰選擇

功能：	地址下拉選單
- 建議技術：	使用政府 API 或 JSON 資料（如 TGOS 或 data.gov.tw）
- 說明：		提供台灣地址選單，支援縣市、鄉鎮等

功能：	燈種選擇與購物車
- 建議技術：	使用 Django 的 Session 或 django-carton
- 說明：		管理購物車與燈種數量選擇

功能：	QR Code 付款
- 建議技術：	產生 QR Code（未來可擴充使用第三方金流，如：Line Pay）
- 說明：		可用 qrcode 套件產生付款碼

功能：	訂單與感謝狀 PDF
- 建議技術：	使用 WeasyPrint 或 xhtml2pdf
- 說明：		將訂單轉為 PDF 格式並提供下載


功能開發備註說明：

**國曆轉農曆功能**
   * 輸入國曆日期與時間 → 轉換農曆年月日 + 時辰地支。
   * 無時間 → 預設吉時。
 
**前端互動**
   * 農曆時辰：下拉選單（吉時 + 12 地支）。
   * 國曆時間：小時與分鐘輸入。
   * 地址：動態生成縣市與鄉鎮區下拉選單並填入郵遞區號

**身份驗證模型設計**：
  **id**：Django 自動遞增整數，作為內部主鍵
  **uuid**：CustomUser 模型中新增唯一欄位，作為 API 對外識別碼，避免 id 被猜測或枚舉。
  **email / phone_number**：作為登入憑證，非主鍵
  **登入邏輯**：判斷輸入為 email 或 phone_number，再執行登入。
   
# 使用者身份驗證模型：
架構原則： 嚴格分離**「內部識別碼」、「公開識別碼」與「登入憑證」**三者的角色。
- 內部主要識別碼 (id)：
	沿用 Django 為 CustomUser 模型提供的自動遞增整數 id 作為系統內部唯一的、不可變的主鍵。所有內部資料庫的關聯都基於此 id。
- 外部公開識別碼 (uuid)：
	在 CustomUser 模型中新增一個非主鍵的、唯一的 uuid 欄位。
	此 uuid 將作為未來 API 路由中暴露給外部的唯一識別碼 (例如 /api/users/<uuid>/)，以增強安全性，避免使用者 ID 被猜測或枚舉。
- 登入憑證 (email, phone_number)：
	email (來自 lithium 專案預設) 和我們將新增的 phone_number 欄位，其角色純粹是「登入憑證」，它們不是使用者在系統中的主要識別碼。
	可能情境：管理者主要使用 email 登入。善信 (一般會員) 主要使用 phone_number 登入。
-技術實現：
	我們將透過一個客製化的 Django 認證後端來實現登入邏輯。
	這個後端會接收使用者的輸入，然後智慧地判斷該輸入是 email 還是 phone_number，並以此查詢到對應的使用者紀錄。 

---------- ---------- ---------- ---------- ---------- ---------- 